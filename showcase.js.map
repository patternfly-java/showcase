{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@patternfly/patternfly/assets/images/img_avatar.svg","webpack:///./node_modules/@patternfly/patternfly/assets/images/pf_logo.svg","webpack:///./node_modules/@patternfly/patternfly/assets/images/PF-Masthead-Logo.svg","webpack:///./node_modules/code-prettify/src/run_prettify.js","webpack:///./src/main/web/favicon.ico","webpack:///./node_modules/@github/time-elements/dist/time-elements.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","win","window","doc","document","root","documentElement","head","getElementsByTagName","scriptQuery","scripts","length","script","match","src","parentNode","removeChild","autorun","langs","skins","callbacks","replace","_","decodeURIComponent","test","push","LOADER_BASE_URL","lang","createElement","onload","onerror","onreadystatechange","readyState","pendingLanguages","checkPendingLanguages","type","encodeURIComponent","insertBefore","firstChild","setTimeout","onLangsLoaded","skinUrls","stylesheets","load","link","rel","error","href","appendChild","loadStylesheetsFallingBack","prettyPrint","FLOW_CONTROL_KEYWORDS","COMMON_KEYWORDS","CPP_KEYWORDS","JAVA_KEYWORDS","CSHARP_KEYWORDS","JSCRIPT_KEYWORDS","PERL_KEYWORDS","PYTHON_KEYWORDS","RUBY_KEYWORDS","SH_KEYWORDS","C_TYPES","PR_STRING","PR_KEYWORD","PR_COMMENT","PR_TYPE","PR_LITERAL","PR_PUNCTUATION","PR_PLAIN","PR_SOURCE","REGEXP_PRECEDER_PATTERN","appendDecorations","sourceNode","basePos","sourceCode","langHandler","out","job","pre","langExtension","numberLines","spans","decorations","apply","notWs","childContentWrapper","element","wrapper","undefined","nextSibling","nodeType","nodeValue","createSimpleLexer","shortcutStylePatterns","fallthroughStylePatterns","tokenizer","shortcuts","allPatterns","concat","allRegexs","regexKeys","patternParts","shortcutChars","charAt","regex","k","regexs","capturedGroupIndex","needToFoldCase","ignoreCase","source","escapeCharToCodeUnit","decodeEscape","charsetPart","cc0","charCodeAt","c1","parseInt","substring","encodeEscape","charCode","toString","ch","String","fromCharCode","caseFoldCharset","charSet","charsetParts","RegExp","ranges","inverse","end","start","Math","max","min","sort","a","b","consolidatedRanges","lastRange","range","join","allowAnywhereFoldCaseAndRenumberGroups","parts","capturedGroups","groupIndex","decimalValue","ch0","cc","rewritten","global","multiline","Error","combinePrefixPatterns","nPatterns","decorate","pos","tokens","styleCache","ti","nTokens","isEmbedded","token","style","tokenStart","embeddedSource","embeddedSourceStart","indexOf","embeddedSourceEnd","langHandlerForExtension","sourceDecorator","options","hc","regexLiterals","regexExcls","regexAny","REGEX_LITERAL","types","keywords","punctuation","decorateSource","node","startLineNum","isPreformatted","nocode","lineBreak","ownerDocument","li","listItems","walk","className","text","firstLine","index","tail","createTextNode","breakAfter","nodeName","child","lineEndNode","parent","copiedListItem","breakLeftOf","limit","copy","rightSide","cloneNode","parentClone","next","sibling","setAttribute","ol","offset","langHandlerRegistry","registerLangHandler","handler","fileExtensions","ext","console","extension","applyDecorator","chunks","opt_langExtension","sourceAndSpans","toLowerCase","isIE8OrEarlier","exec","navigator","userAgent","decPos","newlineRe","sourceLength","sourceIndex","nSpans","spanIndex","nDecorations","decorationIndex","startPos","startDec","oldDisplay","display","styledText","spanEnd","decEnd","textNode","span","replaceChild","recombineTagsAndDecorations","e","$prettyPrintOne","sourceCodeHtml","opt_numberLines","nl","container","innerHTML","$prettyPrint","opt_whenDone","opt_root","body","byTagName","tn","codeSegments","elements","j","clock","Date","langExtensionRe","prettyPrintRe","prettyPrintedRe","preformattedTagNameRe","codeRe","preCodeXmpRe","EMPTY","doWork","endTime","Infinity","cs","attrs","preceder","previousSibling","nt","nested","tagName","preformatted","currentStyle","defaultView","whitespace","getComputedStyle","getPropertyValue","lineNums","PR","define","callback","addEventListener","done","top","add","rem","init","poll","doScroll","createEventObject","frameElement","contentLoaded","arguments","weekdays","months","pad","num","slice","strftime","time","formatString","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","_arg","makeFormatter","format","Intl","DateTimeFormat","RangeError","dayFirst","dayFirstFormatter","isDayFirst","formatter","output","yearSeparator","yearFormatter","localeFromElement","el","closest","HTMLElement","datetimes","WeakMap","ExtendedTimeElement","title","this","getFormattedTitle","hasAttribute","getFormattedDate","textContent","attrName","oldValue","newValue","millis","parse","isNaN","delete","set","titleFormatter","toLocaleString","timeZoneName","formatters","LocalTimeElement","super","attributeChangedCallback","props","weekday","short","long","numeric","prop","getAttribute","trim","formatDate","tz","keys","factory","timef","formatTime","customElements","RelativeTime","locale","ago","timeElapsed","ahead","timeAhead","ms","getTime","sec","round","hr","timeAgoFromMs","timeUntil","formatRelativeTime","timeUntilFromMs","getUTCFullYear","isYearSeparator","timeFormatter","unit","RelativeTimeFormat","makeRelativeFormat","formatEnRelativeTime","RelativeTimeElement","nowElements","updateNowElementsId","updateNowElements","setInterval","connectedCallback","ix","splice","clearInterval","len","TimeAgoElement","microTimeAgo","timeAgo","TimeUntilElement","microTimeUntil"],"mappings":"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","file":"showcase.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = __webpack_public_path__ + \"images/img_avatar.svg\";","module.exports = __webpack_public_path__ + \"images/pf_logo.svg\";","module.exports = __webpack_public_path__ + \"images/PF-Masthead-Logo.svg\";","/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Exmaples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    \n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n    \n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n    \n    \n    var HACK_TO_FIX_JS_INCLUDE_PL;\n    \n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n    \n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    window['PR_SHOULD_USE_CONTINUATION'] = true;\n    \n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n    \n    \n    (function () {\n      var win = window;\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n    \n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n    \n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n    \n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n    \n      \n      \n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * <p>Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * <p>The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n      \n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n    \n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n      \n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n      \n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n      \n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n      \n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n      \n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n      \n          var out = ['['];\n          if (inverse) { out.push('^'); }\n      \n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n      \n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n      \n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n      \n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n      \n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n      \n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n      \n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n      \n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n      \n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n      \n          return parts.join('');\n        }\n      \n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n      \n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n    \n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n      \n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n      \n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n      \n        walk(node);\n      \n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n    \n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n    \n      var notWs = /\\S/;\n    \n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n    \n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n    \n        var nPatterns = fallthroughStylePatterns.length;\n    \n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n    \n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n    \n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n    \n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n    \n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n    \n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n    \n            var tokenStart = pos;\n            pos += token.length;\n    \n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n    \n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n    \n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n    \n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n    \n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n    \n        var punctuation =\n          // The Bash man page says\n    \n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n    \n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n    \n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n    \n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n    \n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n    \n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n    \n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n    \n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n    \n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n    \n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n      \n        var document = node.ownerDocument;\n      \n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n      \n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n      \n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n      \n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n      \n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n      \n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n      \n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n      \n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n      \n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n      \n        node.appendChild(ol);\n      }\n    \n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n      \n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n      \n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n      \n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n      \n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n      \n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n      \n        nDecorations = decorations.length = decPos;\n      \n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n      \n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n      \n            var end = Math.min(spanEnd, decEnd);\n      \n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n      \n            sourceIndex = end;\n      \n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n    \n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n    \n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n    \n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n    \n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n    \n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n    \n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n    \n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n    \n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n    \n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n    \n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n    \n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n    \n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n    \n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n    \n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n    \n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n    \n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n    \n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n    \n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n    \n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n    \n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n    \n        doWork();\n      }\n    \n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint': prettyPrint =\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n    \n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","module.exports = __webpack_public_path__ + \"favicon.ico\";","const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nfunction pad(num) {\n  return \"0\".concat(num).slice(-2);\n}\n\nfunction strftime(time, formatString) {\n  const day = time.getDay();\n  const date = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours();\n  const minute = time.getMinutes();\n  const second = time.getSeconds();\n  return formatString.replace(/%([%aAbBcdeHIlmMpPSwyYZz])/g, function (_arg) {\n    let match;\n    const modifier = _arg[1];\n\n    switch (modifier) {\n      case '%':\n        return '%';\n\n      case 'a':\n        return weekdays[day].slice(0, 3);\n\n      case 'A':\n        return weekdays[day];\n\n      case 'b':\n        return months[month].slice(0, 3);\n\n      case 'B':\n        return months[month];\n\n      case 'c':\n        return time.toString();\n\n      case 'd':\n        return pad(date);\n\n      case 'e':\n        return String(date);\n\n      case 'H':\n        return pad(hour);\n\n      case 'I':\n        return pad(strftime(time, '%l'));\n\n      case 'l':\n        if (hour === 0 || hour === 12) {\n          return String(12);\n        } else {\n          return String((hour + 12) % 12);\n        }\n\n      case 'm':\n        return pad(month + 1);\n\n      case 'M':\n        return pad(minute);\n\n      case 'p':\n        if (hour > 11) {\n          return 'PM';\n        } else {\n          return 'AM';\n        }\n\n      case 'P':\n        if (hour > 11) {\n          return 'pm';\n        } else {\n          return 'am';\n        }\n\n      case 'S':\n        return pad(second);\n\n      case 'w':\n        return String(day);\n\n      case 'y':\n        return pad(year % 100);\n\n      case 'Y':\n        return String(year);\n\n      case 'Z':\n        match = time.toString().match(/\\((\\w+)\\)$/);\n        return match ? match[1] : '';\n\n      case 'z':\n        match = time.toString().match(/\\w([+-]\\d\\d\\d\\d) /);\n        return match ? match[1] : '';\n    }\n\n    return '';\n  });\n}\nfunction makeFormatter(options) {\n  let format;\n  return function () {\n    if (format) return format;\n\n    if ('Intl' in window) {\n      try {\n        format = new Intl.DateTimeFormat(undefined, options);\n        return format;\n      } catch (e) {\n        if (!(e instanceof RangeError)) {\n          throw e;\n        }\n      }\n    }\n  };\n}\nlet dayFirst = null;\nconst dayFirstFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short'\n}); // Private: Determine if the day should be formatted before the month name in\n// the user's current locale. For example, `9 Jun` for en-GB and `Jun 9`\n// for en-US.\n//\n// Returns true if the day appears before the month.\n\nfunction isDayFirst() {\n  if (dayFirst !== null) {\n    return dayFirst;\n  }\n\n  const formatter = dayFirstFormatter();\n\n  if (formatter) {\n    const output = formatter.format(new Date(0));\n    dayFirst = !!output.match(/^\\d/);\n    return dayFirst;\n  } else {\n    return false;\n  }\n}\nlet yearSeparator = null;\nconst yearFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric'\n}); // Private: Determine if the year should be separated from the month and day\n// with a comma. For example, `9 Jun 2014` in en-GB and `Jun 9, 2014` in en-US.\n//\n// Returns true if the date needs a separator.\n\nfunction isYearSeparator() {\n  if (yearSeparator !== null) {\n    return yearSeparator;\n  }\n\n  const formatter = yearFormatter();\n\n  if (formatter) {\n    const output = formatter.format(new Date(0));\n    yearSeparator = !!output.match(/\\d,/);\n    return yearSeparator;\n  } else {\n    return true;\n  }\n} // Private: Determine if the date occurs in the same year as today's date.\n//\n// date - The Date to test.\n//\n// Returns true if it's this year.\n\nfunction isThisYear(date) {\n  const now = new Date();\n  return now.getUTCFullYear() === date.getUTCFullYear();\n}\nfunction makeRelativeFormat(locale, options) {\n  if ('Intl' in window && 'RelativeTimeFormat' in window.Intl) {\n    try {\n      // eslint-disable-next-line flowtype/no-flow-fix-me-comments\n      // $FlowFixMe: missing RelativeTimeFormat type\n      return new Intl.RelativeTimeFormat(locale, options);\n    } catch (e) {\n      if (!(e instanceof RangeError)) {\n        throw e;\n      }\n    }\n  }\n} // Private: Get preferred Intl locale for a target element.\n//\n// Traverses parents until it finds an explicit `lang` other returns \"default\".\n\nfunction localeFromElement(el) {\n  const container = el.closest('[lang]');\n\n  if (container instanceof HTMLElement && container.lang) {\n    return container.lang;\n  }\n\n  return 'default';\n}\n\nconst datetimes = new WeakMap();\nclass ExtendedTimeElement extends HTMLElement {\n  static get observedAttributes() {\n    return ['datetime', 'day', 'format', 'lang', 'hour', 'minute', 'month', 'second', 'title', 'weekday', 'year'];\n  }\n\n  connectedCallback() {\n    const title = this.getFormattedTitle();\n\n    if (title && !this.hasAttribute('title')) {\n      this.setAttribute('title', title);\n    }\n\n    const text = this.getFormattedDate();\n\n    if (text) {\n      this.textContent = text;\n    }\n  } // Internal: Refresh the time element's formatted date when an attribute changes.\n\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === 'datetime') {\n      const millis = Date.parse(newValue);\n\n      if (isNaN(millis)) {\n        datetimes.delete(this);\n      } else {\n        datetimes.set(this, new Date(millis));\n      }\n    }\n\n    const title = this.getFormattedTitle();\n\n    if (title && !this.hasAttribute('title')) {\n      this.setAttribute('title', title);\n    }\n\n    const text = this.getFormattedDate();\n\n    if (text) {\n      this.textContent = text;\n    }\n  }\n\n  get date() {\n    return datetimes.get(this);\n  } // Internal: Format the ISO 8601 timestamp according to the user agent's\n  // locale-aware formatting rules. The element's existing `title` attribute\n  // value takes precedence over this custom format.\n  //\n  // Returns a formatted time String.\n\n\n  getFormattedTitle() {\n    const date = this.date;\n    if (!date) return;\n    const formatter = titleFormatter();\n\n    if (formatter) {\n      return formatter.format(date);\n    } else {\n      try {\n        return date.toLocaleString();\n      } catch (e) {\n        if (e instanceof RangeError) {\n          return date.toString();\n        } else {\n          throw e;\n        }\n      }\n    }\n  }\n\n  getFormattedDate() {}\n\n}\nconst titleFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'short'\n});\n\nconst formatters = new WeakMap();\nclass LocalTimeElement extends ExtendedTimeElement {\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === 'hour' || attrName === 'minute' || attrName === 'second' || attrName === 'time-zone-name') {\n      formatters.delete(this);\n    }\n\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  } // Formats the element's date, in the user's current locale, according to\n  // the formatting attribute values. Values are not passed straight through to\n  // an Intl.DateTimeFormat instance so that weekday and month names are always\n  // displayed in English, for now.\n  //\n  // Supported attributes are:\n  //\n  //   weekday - \"short\", \"long\"\n  //   year    - \"numeric\", \"2-digit\"\n  //   month   - \"short\", \"long\"\n  //   day     - \"numeric\", \"2-digit\"\n  //   hour    - \"numeric\", \"2-digit\"\n  //   minute  - \"numeric\", \"2-digit\"\n  //   second  - \"numeric\", \"2-digit\"\n  //\n  // Returns a formatted time String.\n\n\n  getFormattedDate() {\n    const d = this.date;\n    if (!d) return;\n    const date = formatDate(this, d) || '';\n    const time = formatTime(this, d) || '';\n    return \"\".concat(date, \" \").concat(time).trim();\n  }\n\n} // Private: Format a date according to the `weekday`, `day`, `month`,\n// and `year` attribute values.\n//\n// This doesn't use Intl.DateTimeFormat to avoid creating text in the user's\n// language when the majority of the surrounding text is in English. There's\n// currently no way to separate the language from the format in Intl.\n//\n// el - The local-time element to format.\n//\n// Returns a date String or null if no date formats are provided.\n\nfunction formatDate(el, date) {\n  // map attribute values to strftime\n  const props = {\n    weekday: {\n      short: '%a',\n      long: '%A'\n    },\n    day: {\n      numeric: '%e',\n      '2-digit': '%d'\n    },\n    month: {\n      short: '%b',\n      long: '%B'\n    },\n    year: {\n      numeric: '%Y',\n      '2-digit': '%y'\n    }\n  }; // build a strftime format string\n\n  let format = isDayFirst() ? 'weekday day month year' : 'weekday month day, year';\n\n  for (const prop in props) {\n    const value = props[prop][el.getAttribute(prop)];\n    format = format.replace(prop, value || '');\n  } // clean up year separator comma\n\n\n  format = format.replace(/(\\s,)|(,\\s$)/, ''); // squeeze spaces from final string\n\n  return strftime(date, format).replace(/\\s+/, ' ').trim();\n} // Private: Format a time according to the `hour`, `minute`, and `second`\n// attribute values.\n//\n// el - The local-time element to format.\n//\n// Returns a time String or null if no time formats are provided.\n\n\nfunction formatTime(el, date) {\n  const options = {}; // retrieve format settings from attributes\n\n  const hour = el.getAttribute('hour');\n  if (hour === 'numeric' || hour === '2-digit') options.hour = hour;\n  const minute = el.getAttribute('minute');\n  if (minute === 'numeric' || minute === '2-digit') options.minute = minute;\n  const second = el.getAttribute('second');\n  if (second === 'numeric' || second === '2-digit') options.second = second;\n  const tz = el.getAttribute('time-zone-name');\n  if (tz === 'short' || tz === 'long') options.timeZoneName = tz; // No time format attributes provided.\n\n  if (Object.keys(options).length === 0) {\n    return;\n  }\n\n  let factory = formatters.get(el);\n\n  if (!factory) {\n    factory = makeFormatter(options);\n    formatters.set(el, factory);\n  }\n\n  const formatter = factory();\n\n  if (formatter) {\n    // locale-aware formatting of 24 or 12 hour times\n    return formatter.format(date);\n  } else {\n    // fall back to strftime for non-Intl browsers\n    const timef = options.second ? '%H:%M:%S' : '%H:%M';\n    return strftime(date, timef);\n  }\n} // Public: LocalTimeElement constructor.\n//\n//   var time = new LocalTimeElement()\n//   # => <local-time></local-time>\n//\n\n\nif (!window.customElements.get('local-time')) {\n  window.LocalTimeElement = LocalTimeElement;\n  window.customElements.define('local-time', LocalTimeElement);\n}\n\nclass RelativeTime {\n  constructor(date, locale) {\n    this.date = date;\n    this.locale = locale;\n  }\n\n  toString() {\n    const ago = this.timeElapsed();\n\n    if (ago) {\n      return ago;\n    } else {\n      const ahead = this.timeAhead();\n\n      if (ahead) {\n        return ahead;\n      } else {\n        return \"on \".concat(this.formatDate());\n      }\n    }\n  }\n\n  timeElapsed() {\n    const ms = new Date().getTime() - this.date.getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n\n    if (ms >= 0 && day < 30) {\n      return this.timeAgoFromMs(ms);\n    } else {\n      return null;\n    }\n  }\n\n  timeAhead() {\n    const ms = this.date.getTime() - new Date().getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n\n    if (ms >= 0 && day < 30) {\n      return this.timeUntil();\n    } else {\n      return null;\n    }\n  }\n\n  timeAgo() {\n    const ms = new Date().getTime() - this.date.getTime();\n    return this.timeAgoFromMs(ms);\n  }\n\n  timeAgoFromMs(ms) {\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (ms < 0) {\n      return formatRelativeTime(this.locale, 0, 'second');\n    } else if (sec < 10) {\n      return formatRelativeTime(this.locale, 0, 'second');\n    } else if (sec < 45) {\n      return formatRelativeTime(this.locale, -sec, 'second');\n    } else if (sec < 90) {\n      return formatRelativeTime(this.locale, -min, 'minute');\n    } else if (min < 45) {\n      return formatRelativeTime(this.locale, -min, 'minute');\n    } else if (min < 90) {\n      return formatRelativeTime(this.locale, -hr, 'hour');\n    } else if (hr < 24) {\n      return formatRelativeTime(this.locale, -hr, 'hour');\n    } else if (hr < 36) {\n      return formatRelativeTime(this.locale, -day, 'day');\n    } else if (day < 30) {\n      return formatRelativeTime(this.locale, -day, 'day');\n    } else if (month < 12) {\n      return formatRelativeTime(this.locale, -month, 'month');\n    } else if (month < 18) {\n      return formatRelativeTime(this.locale, -year, 'year');\n    } else {\n      return formatRelativeTime(this.locale, -year, 'year');\n    }\n  }\n\n  microTimeAgo() {\n    const ms = new Date().getTime() - this.date.getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (min < 1) {\n      return '1m';\n    } else if (min < 60) {\n      return \"\".concat(min, \"m\");\n    } else if (hr < 24) {\n      return \"\".concat(hr, \"h\");\n    } else if (day < 365) {\n      return \"\".concat(day, \"d\");\n    } else {\n      return \"\".concat(year, \"y\");\n    }\n  }\n\n  timeUntil() {\n    const ms = this.date.getTime() - new Date().getTime();\n    return this.timeUntilFromMs(ms);\n  }\n\n  timeUntilFromMs(ms) {\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (month >= 18) {\n      return formatRelativeTime(this.locale, year, 'year');\n    } else if (month >= 12) {\n      return formatRelativeTime(this.locale, year, 'year');\n    } else if (day >= 45) {\n      return formatRelativeTime(this.locale, month, 'month');\n    } else if (day >= 30) {\n      return formatRelativeTime(this.locale, month, 'month');\n    } else if (hr >= 36) {\n      return formatRelativeTime(this.locale, day, 'day');\n    } else if (hr >= 24) {\n      return formatRelativeTime(this.locale, day, 'day');\n    } else if (min >= 90) {\n      return formatRelativeTime(this.locale, hr, 'hour');\n    } else if (min >= 45) {\n      return formatRelativeTime(this.locale, hr, 'hour');\n    } else if (sec >= 90) {\n      return formatRelativeTime(this.locale, min, 'minute');\n    } else if (sec >= 45) {\n      return formatRelativeTime(this.locale, min, 'minute');\n    } else if (sec >= 10) {\n      return formatRelativeTime(this.locale, sec, 'second');\n    } else {\n      return formatRelativeTime(this.locale, 0, 'second');\n    }\n  }\n\n  microTimeUntil() {\n    const ms = this.date.getTime() - new Date().getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (day >= 365) {\n      return \"\".concat(year, \"y\");\n    } else if (hr >= 24) {\n      return \"\".concat(day, \"d\");\n    } else if (min >= 60) {\n      return \"\".concat(hr, \"h\");\n    } else if (min > 1) {\n      return \"\".concat(min, \"m\");\n    } else {\n      return '1m';\n    }\n  }\n\n  formatDate() {\n    let format = isDayFirst() ? '%e %b' : '%b %e';\n\n    if (!isThisYear(this.date)) {\n      format += isYearSeparator() ? ', %Y' : ' %Y';\n    }\n\n    return strftime(this.date, format);\n  }\n\n  formatTime() {\n    const formatter = timeFormatter();\n\n    if (formatter) {\n      return formatter.format(this.date);\n    } else {\n      return strftime(this.date, '%l:%M%P');\n    }\n  }\n\n}\n\nfunction formatRelativeTime(locale, value, unit) {\n  const formatter = makeRelativeFormat(locale, {\n    numeric: 'auto'\n  });\n\n  if (formatter) {\n    return formatter.format(value, unit);\n  } else {\n    return formatEnRelativeTime(value, unit);\n  }\n} // Simplified \"en\" RelativeTimeFormat.format function\n//\n// Values should roughly match\n//   new Intl.RelativeTimeFormat('en', {numeric: 'auto'}).format(value, unit)\n//\n\n\nfunction formatEnRelativeTime(value, unit) {\n  if (value === 0) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"this \".concat(unit);\n\n      case 'day':\n        return 'today';\n\n      case 'hour':\n      case 'minute':\n        return \"in 0 \".concat(unit, \"s\");\n\n      case 'second':\n        return 'now';\n    }\n  } else if (value === 1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"next \".concat(unit);\n\n      case 'day':\n        return 'tomorrow';\n\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"in 1 \".concat(unit);\n    }\n  } else if (value === -1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"last \".concat(unit);\n\n      case 'day':\n        return 'yesterday';\n\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"1 \".concat(unit, \" ago\");\n    }\n  } else if (value > 1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n      case 'day':\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"in \".concat(value, \" \").concat(unit, \"s\");\n    }\n  } else if (value < -1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n      case 'day':\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"\".concat(-value, \" \").concat(unit, \"s ago\");\n    }\n  }\n\n  throw new RangeError(\"Invalid unit argument for format() '\".concat(unit, \"'\"));\n}\n\nconst timeFormatter = makeFormatter({\n  hour: 'numeric',\n  minute: '2-digit'\n});\n\nclass RelativeTimeElement extends ExtendedTimeElement {\n  getFormattedDate() {\n    const date = this.date;\n\n    if (date) {\n      return new RelativeTime(date, localeFromElement(this)).toString();\n    }\n  }\n\n  connectedCallback() {\n    nowElements.push(this);\n\n    if (!updateNowElementsId) {\n      updateNowElements();\n      updateNowElementsId = setInterval(updateNowElements, 60 * 1000);\n    }\n\n    super.connectedCallback();\n  }\n\n  disconnectedCallback() {\n    const ix = nowElements.indexOf(this);\n\n    if (ix !== -1) {\n      nowElements.splice(ix, 1);\n    }\n\n    if (!nowElements.length) {\n      if (updateNowElementsId) {\n        clearInterval(updateNowElementsId);\n        updateNowElementsId = null;\n      }\n    }\n  }\n\n} // Internal: Array tracking all elements attached to the document that need\n// to be updated every minute.\n\nconst nowElements = []; // Internal: Timer ID for `updateNowElements` interval.\n\nlet updateNowElementsId; // Internal: Install a timer to refresh all attached relative-time elements every\n// minute.\n\nfunction updateNowElements() {\n  let time, i, len;\n\n  for (i = 0, len = nowElements.length; i < len; i++) {\n    time = nowElements[i];\n    time.textContent = time.getFormattedDate() || '';\n  }\n} // Public: RelativeTimeElement constructor.\n//\n//   var time = new RelativeTimeElement()\n//   # => <relative-time></relative-time>\n//\n\n\nif (!window.customElements.get('relative-time')) {\n  window.RelativeTimeElement = RelativeTimeElement;\n  window.customElements.define('relative-time', RelativeTimeElement);\n}\n\nclass TimeAgoElement extends RelativeTimeElement {\n  getFormattedDate() {\n    const format = this.getAttribute('format');\n    const date = this.date;\n    if (!date) return;\n\n    if (format === 'micro') {\n      return new RelativeTime(date, localeFromElement(this)).microTimeAgo();\n    } else {\n      return new RelativeTime(date, localeFromElement(this)).timeAgo();\n    }\n  }\n\n}\n\nif (!window.customElements.get('time-ago')) {\n  window.TimeAgoElement = TimeAgoElement;\n  window.customElements.define('time-ago', TimeAgoElement);\n}\n\nclass TimeUntilElement extends RelativeTimeElement {\n  getFormattedDate() {\n    const format = this.getAttribute('format');\n    const date = this.date;\n    if (!date) return;\n\n    if (format === 'micro') {\n      return new RelativeTime(date, localeFromElement(this)).microTimeUntil();\n    } else {\n      return new RelativeTime(date, localeFromElement(this)).timeUntil();\n    }\n  }\n\n}\n\nif (!window.customElements.get('time-until')) {\n  window.TimeUntilElement = TimeUntilElement;\n  window.customElements.define('time-until', TimeUntilElement);\n}\n\nexport { LocalTimeElement, RelativeTimeElement, TimeAgoElement, TimeUntilElement };\n"],"sourceRoot":""}