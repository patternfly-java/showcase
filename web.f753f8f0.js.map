{"version":3,"sources":["../../../node_modules/google-code-prettify/src/prettify.js","../../../node_modules/@github/time-elements/dist/time-elements.js","../../../node_modules/select/src/select.js","../../../node_modules/clipboard/src/clipboard-action.js","../../../node_modules/tiny-emitter/index.js","../../../node_modules/good-listener/src/is.js","../../../node_modules/delegate/src/closest.js","../../../node_modules/delegate/src/delegate.js","../../../node_modules/good-listener/src/listen.js","../../../node_modules/clipboard/src/clipboard.js","index.js"],"names":["weekdays","months","pad","num","concat","slice","strftime","time","formatString","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","replace","_arg","match","modifier","toString","String","makeFormatter","options","format","window","Intl","DateTimeFormat","undefined","e","RangeError","dayFirst","dayFirstFormatter","isDayFirst","formatter","output","Date","yearSeparator","yearFormatter","isYearSeparator","isThisYear","now","getUTCFullYear","makeRelativeFormat","locale","RelativeTimeFormat","localeFromElement","el","container","closest","HTMLElement","lang","datetimes","WeakMap","ExtendedTimeElement","observedAttributes","connectedCallback","title","getFormattedTitle","hasAttribute","setAttribute","text","getFormattedDate","textContent","attributeChangedCallback","attrName","oldValue","newValue","oldTitle","millis","parse","isNaN","delete","set","currentTitle","getAttribute","get","titleFormatter","toLocaleString","timeZoneName","formatters","LocalTimeElement","d","formatDate","formatTime","trim","props","weekday","short","long","numeric","prop","value","tz","Object","keys","length","factory","customElements","define","RelativeTime","constructor","ago","timeElapsed","ahead","timeAhead","ms","getTime","sec","Math","round","min","hr","timeAgoFromMs","timeUntil","timeAgo","formatRelativeTime","microTimeAgo","timeUntilFromMs","microTimeUntil","timeFormatter","unit","formatEnRelativeTime","RelativeTimeElement","nowElements","push","updateNowElementsId","updateNowElements","setInterval","disconnectedCallback","ix","indexOf","splice","clearInterval","i","len","TimeAgoElement","TimeUntilElement","ClipboardAction","resolveOptions","initSelection","action","emitter","target","trigger","selectedText","selectFake","selectTarget","isRTL","document","documentElement","removeFake","fakeHandlerCallback","fakeHandler","addEventListener","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","appendChild","copyText","removeEventListener","removeChild","succeeded","execCommand","err","handleResult","emit","clearSelection","bind","focus","activeElement","blur","getSelection","removeAllRanges","_action","Error","nodeType","_target","destroy","Clipboard","Emitter","listenClick","defaultAction","defaultTarget","defaultText","body","listener","onClick","delegateTarget","currentTarget","clipboardAction","getAttributeValue","selector","querySelector","isSupported","actions","support","queryCommandSupported","forEach","suffix","element","attribute"],"mappings":";;;;;;AAunDA,IAAA,EA3iDA,EAUA,EA5BA,GAAA,EAOA,OAAA,4BAAA,EAwBA,WACA,IAAA,EAAA,OAIA,EAAA,CAAA,8CAIA,EAAA,CAHA,CAAA,EAAA,qKAGA,oGAEA,EAAA,CAAA,EAAA,mRAKA,EAAA,CAAA,EACA,8JAGA,EAAA,CAAA,EACA,kRAQA,EAAA,CAAA,EACA,8EAEA,EAAA,iLAGA,EAAA,CAAA,EAAA,wJAIA,EAAA,CAAA,EAAA,0KAIA,EAAA,CAAA,EAAA,4JAGA,EAAA,CAAA,EAAA,gEAKA,EAAA,mHAOA,EAAA,MAKA,EAAA,MAKA,EAAA,MAKA,EAAA,MAKA,EAAA,MAKA,EAAA,MAKA,EAAA,MAgBA,EAAA,MAwCA,EAAA,8MA0VA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,CACA,IAAA,EAAA,CACA,WAAA,EACA,QAAA,GAEA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,EAAA,cAGA,IAAA,EAAA,KAaA,SAAA,EAAA,GAEA,IADA,IAAA,OAAA,EACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,YAAA,CACA,IAAA,EAAA,EAAA,SACA,EAAA,IAAA,EACA,EAAA,EAAA,EACA,IAAA,GACA,EAAA,KAAA,EAAA,WAAA,EACA,EAEA,OAAA,IAAA,OAAA,EAAA,EAiDA,SAAA,EAAA,EAAA,GACA,IACA,EADA,EAAA,IAEA,WAIA,IAHA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,SAAA,GAAA,GACA,EAAA,EAAA,OAAA,IAAA,EAGA,IAAA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,eAAA,KACA,EAAA,KAAA,GACA,EAAA,GAAA,MAGA,EAAA,KAAA,eACA,EAnbA,SAAA,GAKA,IAJA,IAAA,EAAA,EAEA,GAAA,EACA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAEA,IADA,EAAA,EAAA,IACA,WACA,GAAA,OACA,GAAA,SAAA,KAAA,EAAA,OAAA,QACA,0CAAA,KAAA,CACA,GAAA,EACA,GAAA,EACA,MAIA,IAAA,EAAA,CACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,GACA,EAAA,GACA,EAAA,IAGA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,WAAA,GACA,GAAA,KAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,OAAA,GAEA,OADA,EAAA,EAAA,MAGA,KAAA,GAAA,GAAA,IACA,SAAA,EAAA,UAAA,GAAA,GACA,MAAA,GAAA,MAAA,EACA,SAAA,EAAA,UAAA,GAAA,IAEA,EAAA,WAAA,IAIA,SAAA,EAAA,GACA,GAAA,EAAA,GACA,OAAA,EAAA,GAAA,OAAA,OAAA,EAAA,SAAA,IAEA,IAAA,EAAA,OAAA,aAAA,GACA,MAAA,OAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,EACA,KAAA,EAAA,EAGA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,OAAA,GAAA,MACA,IAAA,OACA,qGAOA,MACA,EAAA,GACA,EAAA,MAAA,EAAA,GAEA,EAAA,CAAA,KACA,GAAA,EAAA,KAAA,KAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,YAAA,KAAA,GACA,EAAA,KAAA,OACA,CACA,IACA,EADA,EAAA,EAAA,GAEA,EAAA,EAAA,GAAA,MAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,GAEA,EAAA,EAEA,EAAA,KAAA,CAAA,EAAA,IAKA,EAAA,IAAA,EAAA,MACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,CAAA,GAAA,KAAA,IAAA,GAAA,GAAA,GAAA,KAAA,IAAA,EAAA,MAEA,EAAA,IAAA,EAAA,KACA,EAAA,KAAA,EAAA,GAAA,KAAA,IAAA,GAAA,IAAA,GAAA,KAAA,IAAA,EAAA,SAQA,EAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KACA,IAAA,EAAA,GACA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GACA,EAAA,EAAA,IACA,IAAA,EAAA,GAAA,EACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAEA,EAAA,KAAA,EAAA,GAIA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,EAAA,EAAA,KACA,EAAA,GAAA,EAAA,KACA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,KAAA,KACA,EAAA,KAAA,EAAA,EAAA,MAIA,OADA,EAAA,KAAA,KACA,EAAA,KAAA,IAGA,SAAA,EAAA,GA0BA,IAtBA,IAAA,EAAA,EAAA,OAAA,MACA,IAAA,OACA,4JAUA,MACA,EAAA,EAAA,OAKA,EAAA,GAIA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAEA,OADA,EAAA,EAAA,MAGA,EACA,OAAA,EAAA,OAAA,KACA,GAAA,EAAA,UAAA,MAEA,GAAA,EACA,EAAA,IAAA,EAKA,EAAA,GAAA,EAAA,IAQA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GACA,IAAA,EAAA,KACA,EAAA,KAAA,GAGA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAEA,GAAA,OADA,EAAA,EAAA,IAGA,IADA,KAEA,EAAA,GAAA,YAEA,GAAA,OAAA,EAAA,OAAA,GAAA,CACA,IAAA,GAAA,GAAA,EAAA,UAAA,KACA,GAAA,IACA,EAAA,GAAA,KAAA,EAAA,IAOA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,MAAA,EAAA,IAAA,MAAA,EAAA,EAAA,KAAA,EAAA,GAAA,IAKA,GAAA,EAAA,YAAA,EACA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EACA,GADA,EAAA,EAAA,IACA,OAAA,GACA,EAAA,QAAA,GAAA,MAAA,EACA,EAAA,GAAA,EAAA,GACA,OAAA,IAEA,EAAA,GAAA,EAAA,QACA,YACA,SAAA,GACA,IAAA,EAAA,EAAA,WAAA,GACA,MAAA,IAAA,OAAA,cAAA,GAAA,EAAA,GAAA,GAAA,OAMA,OAAA,EAAA,KAAA,IAGA,IAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,IAAA,EACA,IADA,EAAA,EAAA,IACA,QAAA,EAAA,UAAA,MAAA,IAAA,MAAA,GAAA,GACA,EAAA,KACA,MAAA,EAAA,GAAA,KAGA,OAAA,IAAA,OAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KA6MA,CAAA,GApBA,GAuBA,IAAA,EAAA,EAAA,OAaA,EAAA,SAAA,GAYA,IAXA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,QAMA,EAAA,CAAA,EAAA,GACA,EAAA,EACA,EAAA,EAAA,MAAA,IAAA,GACA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,IAIA,EAJA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,OAAA,EAGA,GAAA,iBAAA,EACA,GAAA,MACA,CACA,IAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EACA,EAAA,EAAA,MAAA,EAAA,IACA,EAAA,EAAA,OACA,CACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAGA,GAFA,EAAA,EAAA,GACA,EAAA,EAAA,MAAA,EAAA,IACA,CACA,EAAA,EAAA,GACA,MAIA,IACA,EAAA,KAIA,EAAA,EAAA,QAAA,GAAA,UAAA,EAAA,UAAA,EAAA,KACA,GAAA,iBAAA,EAAA,KACA,GAAA,EACA,EAAA,GAGA,IAAA,EAAA,GAAA,GAGA,IAAA,EAAA,EAGA,GAFA,GAAA,EAAA,OAEA,EAEA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,QAAA,GACA,EAAA,EAAA,EAAA,OACA,EAAA,KAKA,GADA,EAAA,EAAA,OAAA,EAAA,GAAA,QACA,EAAA,QAEA,IAAA,EAAA,EAAA,UAAA,GAEA,EACA,EAAA,EACA,EAAA,UAAA,EAAA,GACA,EAAA,GAEA,EACA,EAAA,EAAA,EACA,EACA,EAAA,EAAA,GACA,GAEA,EACA,EAAA,EAAA,EACA,EAAA,UAAA,GACA,EAAA,QA5BA,EAAA,KAAA,EAAA,EAAA,GA+BA,EAAA,YAAA,GAEA,OAAA,EAkBA,SAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,oBAEA,EAAA,KACA,CAAA,EAAA,yLACA,KAAA,QACA,EAAA,iBAEA,EAAA,KACA,CAAA,EAAA,uGACA,KAAA,SAGA,EAAA,KACA,CAAA,EACA,qEACA,KAAA,QAEA,EAAA,iBAEA,EAAA,KACA,CAAA,EAAA,8BAAA,OAEA,IAAA,EAAA,EAAA,aACA,IACA,EAAA,gBACA,EAAA,EACA,EAAA,KACA,CAAA,EAAA,wCAAA,KAAA,MAGA,EAAA,KACA,CAAA,EAAA,+FACA,KAAA,MAGA,EAAA,KACA,CAAA,EACA,qFACA,QAEA,EAAA,KAAA,CAAA,EAAA,aAAA,KAAA,OAGA,EAAA,iBACA,EAAA,KAAA,CAAA,EAAA,gBAAA,OACA,EAAA,KACA,CAAA,EAAA,0BAAA,QAEA,IAAA,EAAA,EAAA,cACA,GAAA,EAAA,CAIA,IAAA,EAAA,EAAA,EACA,GACA,OAIA,EAAA,EAAA,IAAA,WAIA,EAIA,WAAA,EAAA,qBAEA,EAAA,UAEA,EAEA,wBAAA,EAAA,UACA,EAAA,mBAGA,EAAA,KACA,CAAA,aACA,OAAA,IAAA,EAAA,IAAA,EAAA,OAIA,IAAA,EAAA,EAAA,MACA,GACA,EAAA,KAAA,CAAA,EAAA,IAGA,IAAA,GAAA,GAAA,EAAA,UAAA,QAAA,SAAA,IACA,EAAA,QACA,EAAA,KACA,CAAA,EACA,IAAA,OAAA,OAAA,EAAA,QAAA,UAAA,KAAA,QACA,OAGA,EAAA,KAAA,CAAA,EAAA,OAAA,KAAA,aAEA,IAAA,EAoCA,2BA4BA,OA3BA,EAAA,gBACA,GAAA,WAGA,EAAA,KAEA,CAAA,EAAA,yBAAA,MACA,CAAA,EAAA,+CAAA,MACA,CAAA,EAAA,wBAAA,MACA,CAAA,EACA,IAAA,OACA,sFASA,KACA,KAAA,cAGA,CAAA,EAAA,aAAA,MACA,CAAA,EAAA,IAAA,OAAA,GAAA,OAEA,EAAA,EAAA,GAGA,IAAA,EAAA,EAAA,CACA,SAn0BA,CACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAk0BA,cAAA,EACA,gBAAA,EACA,kBAAA,EACA,eAAA,IAcA,SAAA,EAAA,EAAA,EAAA,GAOA,IANA,IAAA,EAAA,yBACA,EAAA,WAEA,EAAA,EAAA,cAEA,EAAA,EAAA,cAAA,MACA,EAAA,YACA,EAAA,YAAA,EAAA,YAIA,IAAA,EAAA,CAAA,GAEA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,SACA,GAAA,GAAA,GAAA,EAAA,KAAA,EAAA,YAYA,IAAA,GAAA,GAAA,GAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,UACA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,OACA,EAAA,UAAA,EACA,IAAA,EAAA,EAAA,UAAA,EAAA,MAAA,EAAA,GAAA,QACA,GAAA,EACA,EAAA,WACA,aACA,EAAA,eAAA,GAAA,EAAA,aAEA,EAAA,GACA,GAEA,EAAA,WAAA,YAAA,UA1BA,GAAA,OAAA,EAAA,SACA,EAAA,GAEA,EAAA,YACA,EAAA,WAAA,YAAA,QAGA,IAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,YACA,EAAA,GAyBA,SAAA,EAAA,GAIA,MAAA,EAAA,aAEA,KADA,EAAA,EAAA,YACA,OA4BA,IAHA,IAGA,EAHA,EAtBA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,EAAA,EAAA,WAAA,GAAA,EACA,EAAA,EAAA,WACA,GAAA,EAAA,CAKA,IAAA,EAAA,EAAA,EAAA,GAGA,EAAA,EAAA,YACA,EAAA,YAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,YACA,EAAA,YAAA,GAGA,OAAA,EAGA,CAAA,EAAA,YAAA,IAKA,EAAA,EAAA,aAAA,IAAA,EAAA,UACA,EAAA,EAGA,EAAA,KAAA,GAIA,IAAA,IAAA,EAAA,EACA,EAAA,EAAA,SACA,EACA,EAAA,EAAA,IAIA,KAAA,EAAA,IACA,EAAA,GAAA,aAAA,QAAA,GAGA,IAAA,EAAA,EAAA,cAAA,MACA,EAAA,UAAA,WAEA,IADA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,GAAA,EAAA,EAAA,EAAA,QAAA,EAAA,IAAA,GACA,EAAA,EAAA,IAIA,UAAA,KAAA,EAAA,GAAA,GACA,EAAA,YACA,EAAA,YAAA,EAAA,eAAA,MAEA,EAAA,YAAA,GAGA,EAAA,YAAA,GA+HA,IAAA,EAAA,GAiBA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,SAAA,GAAA,GAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,eAAA,GAEA,EAAA,SACA,QAAA,KAAA,sCAAA,GAFA,EAAA,GAAA,GAMA,SAAA,EAAA,EAAA,GAQA,OAPA,GAAA,EAAA,eAAA,KAGA,EAAA,QAAA,KAAA,GACA,iBACA,gBAEA,EAAA,GA2GA,SAAA,EAAA,GACA,IAr1BA,EAAA,EACA,EAEA,EACA,EACA,EACA,EA+0BA,EAAA,EAAA,cAEA,IAEA,IAAA,GAz1BA,EAy1BA,EAAA,WAz1BA,EAy1BA,EAAA,IAx1BA,EAAA,yBAEA,EAAA,GACA,EAAA,EACA,EAAA,GACA,EAAA,EAEA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,SACA,GAAA,GAAA,EAAA,CACA,GAAA,EAAA,KAAA,EAAA,WAAA,OACA,IAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,YACA,EAAA,GAEA,IAAA,EAAA,EAAA,SAAA,cACA,OAAA,GAAA,OAAA,IACA,EAAA,GAAA,KACA,EAAA,GAAA,GAAA,IACA,EAAA,KAAA,EAAA,GAAA,QAEA,GAAA,GAAA,GAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,UACA,EAAA,SAIA,EAHA,EAGA,EAAA,QAAA,SAAA,MAFA,EAAA,QAAA,cAAA,KAKA,EAAA,GAAA,EACA,EAAA,GAAA,GAAA,EACA,GAAA,EAAA,OACA,EAAA,KAAA,EAAA,GAAA,IAKA,CAAA,GAEA,CACA,WAAA,EAAA,KAAA,IAAA,QAAA,MAAA,IACA,MAAA,IAizBA,EAAA,EAAA,WACA,EAAA,WAAA,EACA,EAAA,MAAA,EAAA,MACA,EAAA,QAAA,EAGA,EAAA,EAAA,EAAA,CAAA,GA1QA,SAAA,GACA,IAAA,EAAA,gBAAA,KAAA,UAAA,WACA,EAAA,IAAA,EAAA,IAAA,EACA,IAoBA,EAAA,EApBA,EAAA,MAEA,EAAA,EAAA,WACA,EAAA,EAAA,OAEA,EAAA,EAEA,EAAA,EAAA,MACA,EAAA,EAAA,OAEA,EAAA,EAEA,EAAA,EAAA,YACA,EAAA,EAAA,OAGA,EAAA,EAKA,IAFA,EAAA,GAAA,EAEA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,MAEA,GAAA,EAMA,IAHA,EAAA,EAGA,EAAA,EAAA,EAAA,EAAA,GAAA,CAKA,IAJA,IAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EAAA,KAAA,GACA,GAAA,EAEA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,EAGA,EAAA,EAAA,OAAA,EAEA,IACA,EADA,EAAA,EAAA,WAEA,IACA,EAAA,EAAA,MAAA,QACA,EAAA,MAAA,QAAA,QAEA,IAEA,KAAA,EAAA,GAAA,CACA,EAAA,GAAA,IAQA,EAPA,EAAA,EAAA,EAAA,IAAA,EAEA,EAAA,EAAA,EAAA,IAAA,EAIA,GAFA,EAAA,KAAA,IAAA,EAAA,GAEA,EAAA,EAAA,IAEA,GAAA,IAAA,EAAA,WAEA,EAAA,EAAA,UAAA,EAAA,IAAA,CAMA,IACA,EAAA,EAAA,QAAA,EAAA,OAEA,EAAA,UAAA,EACA,IAAA,EAAA,EAAA,cACA,EAAA,EAAA,cAAA,QACA,EAAA,UAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,aAAA,EAAA,GACA,EAAA,YAAA,GACA,EAAA,IACA,EAAA,EAAA,GAAA,EAEA,EAAA,eAAA,EAAA,UAAA,EAAA,IACA,EAAA,aAAA,EAAA,EAAA,eAIA,EAAA,IAEA,IACA,GAAA,GAEA,GAAA,IACA,GAAA,IAGA,QACA,IACA,EAAA,MAAA,QAAA,IAqKA,CAAA,GACA,MAAA,GACA,EAAA,SACA,QAAA,IAAA,GAAA,EAAA,OAAA,IAaA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,SAAA,cAAA,OAqBA,OAbA,EAAA,UAAA,QAAA,EAAA,SACA,EAAA,EAAA,WACA,GACA,EAAA,EAAA,GAAA,GASA,EANA,CACA,cAAA,EACA,YAAA,EACA,WAAA,EACA,IAAA,IAGA,EAAA,UAYA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,eAAA,SACA,SAAA,EAAA,GAAA,OAAA,EAAA,qBAAA,GAIA,IAFA,IAAA,EAAA,CAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EACA,EAAA,KAAA,EAAA,GAAA,IAGA,EAAA,KAEA,IAAA,EAAA,KACA,EAAA,MACA,EAAA,CAAA,IAAA,WAAA,OAAA,IAAA,QAKA,IAAA,EAAA,EAGA,EAAA,iCACA,EAAA,kBACA,EAAA,oBACA,EAAA,WACA,EAAA,UACA,EAAA,sBACA,EAAA,IAEA,SAAA,IAIA,IAHA,IAAA,EAAA,EAAA,2BACA,EAAA,MAAA,IACA,EAAA,EACA,EAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA,CAOA,IANA,IAAA,EAAA,EAAA,GAIA,EAAA,EAEA,EAAA,EAAA,EAAA,EAAA,iBAAA,CACA,IAAA,EAAA,EAAA,SAGA,GAAA,IAAA,GAAA,IAAA,IAAA,EAAA,UACA,GAAA,GACA,iBAAA,KAAA,GACA,IAAA,GAAA,KAAA,KAAA,EAAA,WAEA,MAEA,GAAA,EAAA,CACA,EAAA,GACA,EAAA,QACA,wBACA,SAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IACA,OAKA,IAAA,EAAA,EAAA,UACA,IAAA,IAAA,GAAA,EAAA,KAAA,MAIA,EAAA,KAAA,GAAA,CAIA,IADA,IAAA,GAAA,EACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,WAAA,CACA,IAAA,EAAA,EAAA,QACA,GAAA,EAAA,KAAA,IACA,EAAA,WAAA,EAAA,KAAA,EAAA,WAAA,CACA,GAAA,EACA,OAGA,IAAA,EAAA,CAGA,EAAA,WAAA,iBAUA,IAIA,EASA,EAbA,EAAA,EAAA,KAcA,GAbA,MACA,EAAA,EAAA,MAAA,MAGA,EAAA,EAAA,KACA,EAAA,KAAA,EAAA,WACA,EAAA,EAAA,UAAA,MAAA,IAGA,IAAA,EAAA,EAAA,KAIA,EAAA,KAAA,EAAA,SACA,EAAA,MACA,CACA,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,YACA,EACA,EACA,EAAA,WACA,GACA,EAAA,iBACA,EAAA,iBAAA,EAAA,MACA,iBAAA,eACA,EACA,EAAA,GACA,QAAA,EAAA,UAAA,EAAA,GAKA,IAAA,EAAA,EAAA,UACA,EAAA,SAAA,IAAA,KAEA,KADA,EAAA,EAAA,MAAA,+BAGA,EAAA,KAAA,EAAA,GAAA,SACA,EAAA,KAGA,GAAA,EAAA,EAAA,EAAA,GASA,EANA,CACA,cAAA,EACA,WAAA,EACA,YAAA,EACA,IAAA,MAMA,EAAA,EAAA,OAEA,WAAA,EAAA,KACA,mBAAA,GACA,IAIA,GAzUA,EAAA,EAAA,CAAA,iBACA,EACA,EACA,GACA,CACA,CAAA,EAAA,WACA,CApkCA,MAokCA,qBACA,CAAA,EAAA,4BAEA,CAAA,QAAA,2BACA,CAAA,QAAA,yBACA,CAAA,EAAA,oBACA,CAAA,QAAA,0CAEA,CAAA,UAAA,kDAEA,CAAA,WAAA,gDACA,CAAA,cAAA,0BAEA,CAAA,iBAAA,MAAA,OAAA,OAAA,QAAA,MAAA,QACA,EACA,EACA,CACA,CAAA,EAAA,SAAA,KAAA,WACA,CAvkCA,MAukCA,+BAAA,KAAA,QAEA,CACA,CA9lCA,MA8lCA,qCACA,CAhlCA,MAglCA,0CACA,CAAA,cAAA,+CACA,CAAA,EAAA,aACA,CAAA,UAAA,8BACA,CAAA,UAAA,8BACA,CAAA,UAAA,+BACA,CAAA,WAAA,8BACA,CAAA,WAAA,8BACA,CAAA,WAAA,iCAEA,CAAA,WACA,EACA,EAAA,GAAA,CAAA,CAvlCA,MAulCA,cAAA,CAAA,WACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,gBAAA,EACA,MAAA,IACA,CAAA,IAAA,KAAA,MAAA,MAAA,MAAA,MACA,EAAA,EAAA,CACA,SAAA,oBACA,CAAA,SACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,gBAAA,EACA,iBAAA,EACA,MAAA,IACA,CAAA,OACA,EAAA,EAAA,CACA,SAAA,EACA,gBAAA,IACA,CAAA,SACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,kBAAA,IACA,CAAA,OAAA,MAAA,MAAA,OACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,kBAAA,EACA,qBAAA,IACA,CAAA,KAAA,KAAA,WACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,kBAAA,EACA,cAAA,IACA,CAAA,OAAA,KAAA,OACA,EAAA,EAAA,CACA,SAAA,EACA,cAAA,EACA,kBAAA,EACA,eAAA,IACA,CAAA,KAAA,SACA,EAAA,EAAA,CACA,SAAA,EACA,gBAAA,EACA,eAAA,IACA,CAAA,aAAA,OACA,EAAA,EAAA,CACA,SAjuCA,qKAkuCA,aAAA,EACA,gBAAA,EACA,kBAAA,EACA,qBAAA,EACA,eAAA,IACA,CAAA,WACA,EAAA,EAAA,CACA,SAAA,EACA,gBAAA,EACA,kBAAA,IACA,CAAA,KAAA,KAAA,SACA,EACA,EAAA,GAAA,CAAA,CAAA,EAAA,cAAA,CAAA,UAyOA,IAAA,EAAA,EAAA,GAAA,CACA,kBAAA,EACA,oBAAA,EACA,gBAAA,EACA,eAx4CA,MAy4CA,gBAp4CA,MAq4CA,WAAA,EACA,eAr5CA,MAs5CA,WAAA,EACA,WAAA,EACA,UAl4CA,SAm4CA,SAAA,EACA,eAAA,EACA,UAAA,EACA,UAAA,EACA,OAl6CA,MAm6CA,QAAA,EACA,eACA,EACA,EAAA,eAAA,EACA,EAAA,EACA,YAAA,EACA,EACA,EAAA,YAAA,EACA,EAAA,GAeA,mBAAA,GAAA,EAAA,KACA,EAAA,uBAAA,GAAA,WACA,OAAA,IA1hDA;;AC2tBC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,eAAA,QAAA,oBAAA,QAAA,sBAAA,EApzBD,MAAMA,EAAW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC9EC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE9H,SAASC,EAAIC,GACJ,MAAA,IAAIC,OAAOD,GAAKE,OAAO,GAGhC,SAASC,EAASC,EAAMC,GAChBC,MAAAA,EAAMF,EAAKG,SACXC,EAAOJ,EAAKK,UACZC,EAAQN,EAAKO,WACbC,EAAOR,EAAKS,cACZC,EAAOV,EAAKW,WACZC,EAASZ,EAAKa,aACdC,EAASd,EAAKe,aACbd,OAAAA,EAAae,QAAQ,8BAA+B,SAAUC,GAC/DC,IAAAA,EAGIC,OAFSF,EAAK,IAGf,IAAA,IACI,MAAA,IAEJ,IAAA,IACIxB,OAAAA,EAASS,GAAKJ,MAAM,EAAG,GAE3B,IAAA,IACIL,OAAAA,EAASS,GAEb,IAAA,IACIR,OAAAA,EAAOY,GAAOR,MAAM,EAAG,GAE3B,IAAA,IACIJ,OAAAA,EAAOY,GAEX,IAAA,IACIN,OAAAA,EAAKoB,WAET,IAAA,IACIzB,OAAAA,EAAIS,GAER,IAAA,IACIiB,OAAAA,OAAOjB,GAEX,IAAA,IACIT,OAAAA,EAAIe,GAER,IAAA,IACIf,OAAAA,EAAII,EAASC,EAAM,OAEvB,IAAA,IACCU,OAAS,IAATA,GAAuB,KAATA,EACTW,OAAO,IAEPA,QAAQX,EAAO,IAAM,IAG3B,IAAA,IACIf,OAAAA,EAAIW,EAAQ,GAEhB,IAAA,IACIX,OAAAA,EAAIiB,GAER,IAAA,IACCF,OAAAA,EAAO,GACF,KAEA,KAGN,IAAA,IACCA,OAAAA,EAAO,GACF,KAEA,KAGN,IAAA,IACIf,OAAAA,EAAImB,GAER,IAAA,IACIO,OAAAA,OAAOnB,GAEX,IAAA,IACIP,OAAAA,EAAIa,EAAO,KAEf,IAAA,IACIa,OAAAA,OAAOb,GAEX,IAAA,IAEIU,OADPA,EAAQlB,EAAKoB,WAAWF,MAAM,eACfA,EAAM,GAAK,GAEvB,IAAA,IAEIA,OADPA,EAAQlB,EAAKoB,WAAWF,MAAM,sBACfA,EAAM,GAAK,GAGvB,MAAA,KAGX,SAASI,EAAcC,GACjBC,IAAAA,EACG,OAAA,WACDA,GAAAA,EAAQ,OAAOA,EAEf,GAAA,SAAUC,OACR,IAEKD,OADPA,EAAS,IAAIE,KAAKC,oBAAeC,EAAWL,GAE5C,MAAOM,GACH,KAAEA,aAAaC,YACXD,MAAAA,IAMhB,IAAIE,EAAW,KACf,MAAMC,EAAoBV,EAAc,CACtCpB,IAAK,UACLI,MAAO,UAOT,SAAS2B,IACHF,GAAa,OAAbA,EACKA,OAAAA,EAGHG,MAAAA,EAAYF,IAEdE,GAAAA,EAAW,CACPC,MAAAA,EAASD,EAAUV,OAAO,IAAIY,KAAK,IAElCL,OADPA,IAAaI,EAAOjB,MAAM,OAGnB,OAAA,EAGX,IAAImB,EAAgB,KACpB,MAAMC,EAAgBhB,EAAc,CAClCpB,IAAK,UACLI,MAAO,QACPE,KAAM,YAMR,SAAS+B,IACHF,GAAkB,OAAlBA,EACKA,OAAAA,EAGHH,MAAAA,EAAYI,IAEdJ,GAAAA,EAAW,CACPC,MAAAA,EAASD,EAAUV,OAAO,IAAIY,KAAK,IAElCC,OADPA,IAAkBF,EAAOjB,MAAM,OAGxB,OAAA,EAQX,SAASsB,EAAWpC,GAEXqC,OADK,IAAIL,MACLM,mBAAqBtC,EAAKsC,iBAEvC,SAASC,EAAmBC,EAAQrB,GAC9B,GAAA,SAAUE,QAAU,uBAAwBA,OAAOC,KACjD,IAGK,OAAA,IAAIA,KAAKmB,mBAAmBD,EAAQrB,GAC3C,MAAOM,GACH,KAAEA,aAAaC,YACXD,MAAAA,GAQd,SAASiB,EAAkBC,GACnBC,MAAAA,EAAYD,EAAGE,QAAQ,UAEzBD,OAAAA,aAAqBE,aAAeF,EAAUG,KACzCH,EAAUG,KAGZ,UAGT,MAAMC,EAAY,IAAIC,QACtB,MAAMC,UAA4BJ,YACrBK,gCACF,MAAA,CAAC,WAAY,MAAO,SAAU,OAAQ,OAAQ,SAAU,QAAS,SAAU,QAAS,UAAW,QAGxGC,oBACQC,MAAAA,EAAQ,KAAKC,oBAEfD,IAAU,KAAKE,aAAa,UACzBC,KAAAA,aAAa,QAASH,GAGvBI,MAAAA,EAAO,KAAKC,mBAEdD,IACGE,KAAAA,YAAcF,GAKvBG,yBAAyBC,EAAUC,EAAUC,GACrCC,MAAAA,EAAW,KAAKV,oBAElBO,GAAa,aAAbA,EAAyB,CACrBI,MAAAA,EAASjC,KAAKkC,MAAMH,GAEtBI,MAAMF,GACRjB,EAAUoB,OAAO,MAEjBpB,EAAUqB,IAAI,KAAM,IAAIrC,KAAKiC,IAI3BZ,MAAAA,EAAQ,KAAKC,oBACbgB,EAAe,KAAKC,aAAa,SAEtB,UAAbV,IAAwBR,GAAWiB,GAAgBA,IAAiBN,GACjER,KAAAA,aAAa,QAASH,GAGvBI,MAAAA,EAAO,KAAKC,mBAEdD,IACGE,KAAAA,YAAcF,GAInBzD,WACKgD,OAAAA,EAAUwB,IAAI,MAQvBlB,oBACQtD,MAAAA,EAAO,KAAKA,KACd,IAACA,EAAM,OACL8B,MAAAA,EAAY2C,IAEd3C,GAAAA,EACKA,OAAAA,EAAUV,OAAOpB,GAEpB,IACKA,OAAAA,EAAK0E,iBACZ,MAAOjD,GACHA,GAAAA,aAAaC,WACR1B,OAAAA,EAAKgB,WAENS,MAAAA,GAMdiC,qBAGF,MAAMe,EAAiBvD,EAAc,CACnCpB,IAAK,UACLI,MAAO,QACPE,KAAM,UACNE,KAAM,UACNE,OAAQ,UACRmE,aAAc,UAGVC,EAAa,IAAI3B,QACvB,MAAM4B,UAAyB3B,EAC7BU,yBAAyBC,EAAUC,EAAUC,GAC1B,SAAbF,GAAoC,WAAbA,GAAsC,WAAbA,GAAsC,mBAAbA,GAC3Ee,EAAWR,OAAO,MAGdR,MAAAA,yBAAyBC,EAAUC,EAAUC,GAmBrDL,mBACQoB,MAAAA,EAAI,KAAK9E,KACX,IAAC8E,EAAG,OACF9E,MAAAA,EAAO+E,EAAW,KAAMD,IAAM,GAC9BlF,EAAOoF,EAAW,KAAMF,IAAM,GAC7B,MAAA,GAAGrF,OAAOO,EAAM,KAAKP,OAAOG,GAAMqF,QAc7C,SAASF,EAAWpC,EAAI3C,GAEhBkF,MAAAA,EAAQ,CACZC,QAAS,CACPC,MAAO,KACPC,KAAM,MAERvF,IAAK,CACHwF,QAAS,KACE,UAAA,MAEbpF,MAAO,CACLkF,MAAO,KACPC,KAAM,MAERjF,KAAM,CACJkF,QAAS,KACE,UAAA,OAIXlE,IAAAA,EAASS,IAAe,yBAA2B,0BAElD,IAAA,MAAM0D,KAAQL,EAAO,CAClBM,MAAAA,EAAQN,EAAMK,GAAM5C,EAAG4B,aAAagB,IAC1CnE,EAASA,EAAOR,QAAQ2E,EAAMC,GAAS,IAMlC7F,OAAAA,EAASK,EAFhBoB,EAASA,EAAOR,QAAQ,eAAgB,KAEVA,QAAQ,MAAO,KAAKqE,OASpD,SAASD,EAAWrC,EAAI3C,GAChBmB,MAAAA,EAAU,GAEVb,EAAOqC,EAAG4B,aAAa,QAChB,YAATjE,GAA+B,YAATA,IAAoBa,EAAQb,KAAOA,GACvDE,MAAAA,EAASmC,EAAG4B,aAAa,UAChB,YAAX/D,GAAmC,YAAXA,IAAsBW,EAAQX,OAASA,GAC7DE,MAAAA,EAASiC,EAAG4B,aAAa,UAChB,YAAX7D,GAAmC,YAAXA,IAAsBS,EAAQT,OAASA,GAC7D+E,MAAAA,EAAK9C,EAAG4B,aAAa,kBAGvBmB,GAFO,UAAPD,GAAyB,SAAPA,IAAetE,EAAQwD,aAAec,GAExB,IAAhCC,OAAOC,KAAKxE,GAASyE,OACvB,OAGEC,IAAAA,EAAUjB,EAAWJ,IAAI7B,GAExBkD,IACHA,EAAU3E,EAAcC,GACxByD,EAAWP,IAAI1B,EAAIkD,IAGf/D,MAAAA,EAAY+D,IAEd/D,GAAAA,EAEKA,OAAAA,EAAUV,OAAOpB,GAIjBL,OAAAA,EAASK,EADFmB,EAAQT,OAAS,WAAa,SA6Z/C,QAAA,iBAAA,EAnZIW,OAAOyE,eAAetB,IAAI,gBAC7BnD,OAAOwD,iBAAmBA,EAC1BxD,OAAOyE,eAAeC,OAAO,aAAclB,IAG7C,MAAMmB,EACJC,YAAYjG,EAAMwC,GACXxC,KAAAA,KAAOA,EACPwC,KAAAA,OAASA,EAGhBxB,WACQkF,MAAAA,EAAM,KAAKC,cAEbD,GAAAA,EACKA,OAAAA,EACF,CACCE,MAAAA,EAAQ,KAAKC,YAEfD,OAAAA,GAGK,MAAM3G,OAAO,KAAKsF,eAK/BoB,cACQG,MAAAA,GAAK,IAAItE,MAAOuE,UAAY,KAAKvG,KAAKuG,UACtCC,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IAExBN,OAAAA,GAAM,GAAKxG,EAAM,GACZ,KAAK+G,cAAcP,GAEnB,KAIXD,YACQC,MAAAA,EAAK,KAAKtG,KAAKuG,WAAY,IAAIvE,MAAOuE,UACtCC,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IAExBN,OAAAA,GAAM,GAAKxG,EAAM,GACZ,KAAKgH,YAEL,KAIXC,UACQT,MAAAA,GAAK,IAAItE,MAAOuE,UAAY,KAAKvG,KAAKuG,UACrC,OAAA,KAAKM,cAAcP,GAG5BO,cAAcP,GACNE,MAAAA,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IACtB1G,EAAQuG,KAAKC,MAAM5G,EAAM,IACzBM,EAAOqG,KAAKC,MAAMxG,EAAQ,IAE5BoG,OAAAA,EAAK,EACAU,EAAmB,KAAKxE,OAAQ,EAAG,UACjCgE,EAAM,GACRQ,EAAmB,KAAKxE,OAAQ,EAAG,UACjCgE,EAAM,GACRQ,EAAmB,KAAKxE,QAASgE,EAAK,UACpCA,EAAM,GACRQ,EAAmB,KAAKxE,QAASmE,EAAK,UACpCA,EAAM,GACRK,EAAmB,KAAKxE,QAASmE,EAAK,UACpCA,EAAM,GACRK,EAAmB,KAAKxE,QAASoE,EAAI,QACnCA,EAAK,GACPI,EAAmB,KAAKxE,QAASoE,EAAI,QACnCA,EAAK,GACPI,EAAmB,KAAKxE,QAAS1C,EAAK,OACpCA,EAAM,GACRkH,EAAmB,KAAKxE,QAAS1C,EAAK,OACpCI,EAAQ,GACV8G,EAAmB,KAAKxE,QAAStC,EAAO,SAExC8G,EAAmB,KAAKxE,QAASpC,EAAM,QAMlD6G,eACQX,MAAAA,GAAK,IAAItE,MAAOuE,UAAY,KAAKvG,KAAKuG,UACtCC,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IACtB1G,EAAQuG,KAAKC,MAAM5G,EAAM,IACzBM,EAAOqG,KAAKC,MAAMxG,EAAQ,IAE5ByG,OAAAA,EAAM,EACD,KACEA,EAAM,GACR,GAAGlH,OAAOkH,EAAK,KACbC,EAAK,GACP,GAAGnH,OAAOmH,EAAI,KACZ9G,EAAM,IACR,GAAGL,OAAOK,EAAK,KAEf,GAAGL,OAAOW,EAAM,KAI3B0G,YACQR,MAAAA,EAAK,KAAKtG,KAAKuG,WAAY,IAAIvE,MAAOuE,UACrC,OAAA,KAAKW,gBAAgBZ,GAG9BY,gBAAgBZ,GACRE,MAAAA,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IACtB1G,EAAQuG,KAAKC,MAAM5G,EAAM,IACzBM,EAAOqG,KAAKC,MAAMxG,EAAQ,IAE5BA,OAAAA,GAAS,GACJ8G,EAAmB,KAAKxE,OAAQpC,EAAM,QACpCF,GAAS,GACX8G,EAAmB,KAAKxE,OAAQpC,EAAM,QACpCN,GAAO,GACTkH,EAAmB,KAAKxE,OAAQtC,EAAO,SACrCJ,GAAO,GACTkH,EAAmB,KAAKxE,OAAQtC,EAAO,SACrC0G,GAAM,GACRI,EAAmB,KAAKxE,OAAQ1C,EAAK,OACnC8G,GAAM,GACRI,EAAmB,KAAKxE,OAAQ1C,EAAK,OACnC6G,GAAO,GACTK,EAAmB,KAAKxE,OAAQoE,EAAI,QAClCD,GAAO,GACTK,EAAmB,KAAKxE,OAAQoE,EAAI,QAClCJ,GAAO,GACTQ,EAAmB,KAAKxE,OAAQmE,EAAK,UACnCH,GAAO,GACTQ,EAAmB,KAAKxE,OAAQmE,EAAK,UAErCK,EAAmB,KAAKxE,OADtBgE,GAAO,GACuBA,EAEA,EAFK,UAMhDW,iBACQb,MAAAA,EAAK,KAAKtG,KAAKuG,WAAY,IAAIvE,MAAOuE,UACtCC,EAAMC,KAAKC,MAAMJ,EAAK,KACtBK,EAAMF,KAAKC,MAAMF,EAAM,IACvBI,EAAKH,KAAKC,MAAMC,EAAM,IACtB7G,EAAM2G,KAAKC,MAAME,EAAK,IACtB1G,EAAQuG,KAAKC,MAAM5G,EAAM,IACzBM,EAAOqG,KAAKC,MAAMxG,EAAQ,IAE5BJ,OAAAA,GAAO,IACF,GAAGL,OAAOW,EAAM,KACdwG,GAAM,GACR,GAAGnH,OAAOK,EAAK,KACb6G,GAAO,GACT,GAAGlH,OAAOmH,EAAI,KACZD,EAAM,EACR,GAAGlH,OAAOkH,EAAK,KAEf,KAIX5B,aACM3D,IAAAA,EAASS,IAAe,QAAU,QAM/BlC,OAJFyC,EAAW,KAAKpC,QACnBoB,GAAUe,IAAoB,OAAS,OAGlCxC,EAAS,KAAKK,KAAMoB,GAG7B4D,aACQlD,MAAAA,EAAYsF,IAEdtF,OAAAA,EACKA,EAAUV,OAAO,KAAKpB,MAEtBL,EAAS,KAAKK,KAAM,YAMjC,SAASgH,EAAmBxE,EAAQgD,EAAO6B,GACnCvF,MAAAA,EAAYS,EAAmBC,EAAQ,CAC3C8C,QAAS,SAGPxD,OAAAA,EACKA,EAAUV,OAAOoE,EAAO6B,GAExBC,EAAqB9B,EAAO6B,GASvC,SAASC,EAAqB9B,EAAO6B,GAC/B7B,GAAU,IAAVA,EACM6B,OAAAA,GACD,IAAA,OACA,IAAA,UACA,IAAA,QACA,IAAA,OACI,MAAA,QAAQ5H,OAAO4H,GAEnB,IAAA,MACI,MAAA,QAEJ,IAAA,OACA,IAAA,SACI,MAAA,QAAQ5H,OAAO4H,EAAM,KAEzB,IAAA,SACI,MAAA,WAEN,GAAc,IAAV7B,EACD6B,OAAAA,GACD,IAAA,OACA,IAAA,UACA,IAAA,QACA,IAAA,OACI,MAAA,QAAQ5H,OAAO4H,GAEnB,IAAA,MACI,MAAA,WAEJ,IAAA,OACA,IAAA,SACA,IAAA,SACI,MAAA,QAAQ5H,OAAO4H,QAErB,IAAe,IAAX7B,EACD6B,OAAAA,GACD,IAAA,OACA,IAAA,UACA,IAAA,QACA,IAAA,OACI,MAAA,QAAQ5H,OAAO4H,GAEnB,IAAA,MACI,MAAA,YAEJ,IAAA,OACA,IAAA,SACA,IAAA,SACI,MAAA,KAAK5H,OAAO4H,EAAM,aAExB,GAAI7B,EAAQ,EACT6B,OAAAA,GACD,IAAA,OACA,IAAA,UACA,IAAA,QACA,IAAA,OACA,IAAA,MACA,IAAA,OACA,IAAA,SACA,IAAA,SACI,MAAA,MAAM5H,OAAO+F,EAAO,KAAK/F,OAAO4H,EAAM,UAE5C,GAAI7B,GAAS,EACV6B,OAAAA,GACD,IAAA,OACA,IAAA,UACA,IAAA,QACA,IAAA,OACA,IAAA,MACA,IAAA,OACA,IAAA,SACA,IAAA,SACI,MAAA,GAAG5H,QAAQ+F,EAAO,KAAK/F,OAAO4H,EAAM,SAI3C,MAAA,IAAI3F,WAAW,uCAAuCjC,OAAO4H,EAAM,MAG3E,MAAMD,EAAgBlG,EAAc,CAClCZ,KAAM,UACNE,OAAQ,YAGV,MAAM+G,UAA4BrE,EAChCQ,mBACQ1D,MAAAA,EAAO,KAAKA,KAEdA,GAAAA,EACK,OAAA,IAAIgG,EAAahG,EAAM0C,EAAkB,OAAO1B,WAI3DoC,oBACEoE,EAAYC,KAAK,MAEZC,IACHC,IACAD,EAAsBE,YAAYD,EAAmB,MAGjDvE,MAAAA,oBAGRyE,uBACQC,MAAAA,EAAKN,EAAYO,QAAQ,OAEnB,IAARD,GACFN,EAAYQ,OAAOF,EAAI,GAGpBN,EAAY5B,QACX8B,IACFO,cAAcP,GACdA,EAAsB,OAsE7B,QAAA,oBAAA,EA9DD,MAAMF,EAAc,GAEpB,IAAIE,EAGJ,SAASC,IACH/H,IAAAA,EAAMsI,EAAGC,EAERD,IAAAA,EAAI,EAAGC,EAAMX,EAAY5B,OAAQsC,EAAIC,EAAKD,KAC7CtI,EAAO4H,EAAYU,IACdvE,YAAc/D,EAAK8D,oBAAsB,GAS7CrC,OAAOyE,eAAetB,IAAI,mBAC7BnD,OAAOkG,oBAAsBA,EAC7BlG,OAAOyE,eAAeC,OAAO,gBAAiBwB,IAGhD,MAAMa,UAAuBb,EAC3B7D,mBACQtC,MAAAA,EAAS,KAAKmD,aAAa,UAC3BvE,EAAO,KAAKA,KACd,GAACA,EAEDoB,MAAW,UAAXA,EACK,IAAI4E,EAAahG,EAAM0C,EAAkB,OAAOuE,eAEhD,IAAIjB,EAAahG,EAAM0C,EAAkB,OAAOqE,WA6B5D,QAAA,eAAA,EAvBI1F,OAAOyE,eAAetB,IAAI,cAC7BnD,OAAO+G,eAAiBA,EACxB/G,OAAOyE,eAAeC,OAAO,WAAYqC,IAG3C,MAAMC,UAAyBd,EAC7B7D,mBACQtC,MAAAA,EAAS,KAAKmD,aAAa,UAC3BvE,EAAO,KAAKA,KACd,GAACA,EAEDoB,MAAW,UAAXA,EACK,IAAI4E,EAAahG,EAAM0C,EAAkB,OAAOyE,iBAEhD,IAAInB,EAAahG,EAAM0C,EAAkB,OAAOoE,aAS5D,QAAA,iBAAA,EAHIzF,OAAOyE,eAAetB,IAAI,gBAC7BnD,OAAOgH,iBAAmBA,EAC1BhH,OAAOyE,eAAeC,OAAO,aAAcsC;;ACnzB7C,SAAA,EAAA,GACA,IAAA,EAEA,GAAA,WAAA,EAAA,SACA,EAAA,QAEA,EAAA,EAAA,WAEA,GAAA,UAAA,EAAA,UAAA,aAAA,EAAA,SAAA,CACA,IAAA,EAAA,EAAA,aAAA,YAEA,GACA,EAAA,aAAA,WAAA,IAGA,EAAA,SACA,EAAA,kBAAA,EAAA,EAAA,MAAA,QAEA,GACA,EAAA,gBAAA,YAGA,EAAA,EAAA,UAEA,CACA,EAAA,aAAA,oBACA,EAAA,QAGA,IAAA,EAAA,OAAA,eACA,EAAA,SAAA,cAEA,EAAA,mBAAA,GACA,EAAA,kBACA,EAAA,SAAA,GAEA,EAAA,EAAA,WAGA,OAAA,EAGA,OAAA,QAAA;;ACiKeC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3Mf,IAAA,EAAA,EAAA,QAAA,WA2MeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GArMf,MAAMA,EAIFrC,YAAY9E,GACHoH,KAAAA,eAAepH,GACfqH,KAAAA,gBAOTD,eAAepH,EAAU,IAChBsH,KAAAA,OAAYtH,EAAQsH,OACpB7F,KAAAA,UAAYzB,EAAQyB,UACpB8F,KAAAA,QAAYvH,EAAQuH,QACpBC,KAAAA,OAAYxH,EAAQwH,OACpBlF,KAAAA,KAAYtC,EAAQsC,KACpBmF,KAAAA,QAAYzH,EAAQyH,QAEpBC,KAAAA,aAAe,GAOxBL,gBACQ,KAAK/E,KACAqF,KAAAA,aAEA,KAAKH,QACLI,KAAAA,eAQbD,aACUE,MAAAA,EAAwD,OAAhDC,SAASC,gBAAgB3E,aAAa,OAE/C4E,KAAAA,aAEAC,KAAAA,oBAAsB,KAAM,KAAKD,cACjCE,KAAAA,YAAc,KAAKzG,UAAU0G,iBAAiB,QAAS,KAAKF,uBAAwB,EAEpFG,KAAAA,SAAWN,SAASO,cAAc,YAElCD,KAAAA,SAASE,MAAMC,SAAW,OAE1BH,KAAAA,SAASE,MAAME,OAAS,IACxBJ,KAAAA,SAASE,MAAMG,QAAU,IACzBL,KAAAA,SAASE,MAAMI,OAAS,IAExBN,KAAAA,SAASE,MAAMK,SAAW,WAC1BP,KAAAA,SAASE,MAAOT,EAAQ,QAAU,QAAW,UAE9Ce,IAAAA,EAAY1I,OAAO2I,aAAef,SAASC,gBAAgBe,UAC1DV,KAAAA,SAASE,MAAMS,OAASH,MAExBR,KAAAA,SAAS/F,aAAa,WAAY,IAClC+F,KAAAA,SAAS/D,MAAQ,KAAK/B,KAEtBb,KAAAA,UAAUuH,YAAY,KAAKZ,UAE3BV,KAAAA,cAAe,EAAO,EAAA,SAAA,KAAKU,UAC3Ba,KAAAA,WAOTjB,aACQ,KAAKE,cACAzG,KAAAA,UAAUyH,oBAAoB,QAAS,KAAKjB,qBAC5CC,KAAAA,YAAc,KACdD,KAAAA,oBAAsB,MAG3B,KAAKG,WACA3G,KAAAA,UAAU0H,YAAY,KAAKf,UAC3BA,KAAAA,SAAW,MAOxBR,eACSF,KAAAA,cAAe,EAAO,EAAA,SAAA,KAAKF,QAC3ByB,KAAAA,WAMTA,WACQG,IAAAA,EAEA,IACAA,EAAYtB,SAASuB,YAAY,KAAK/B,QAE1C,MAAOgC,GACHF,GAAY,EAGXG,KAAAA,aAAaH,GAOtBG,aAAaH,GACJ7B,KAAAA,QAAQiC,KAAKJ,EAAY,UAAY,QAAS,CAC/C9B,OAAQ,KAAKA,OACbhF,KAAM,KAAKoF,aACXD,QAAS,KAAKA,QACdgC,eAAgB,KAAKA,eAAeC,KAAK,QAOjDD,iBACQ,KAAKhC,SACAA,KAAAA,QAAQkC,QAEjB7B,SAAS8B,cAAcC,OACvB3J,OAAO4J,eAAeC,kBAOtBzC,WAAOA,EAAS,QAGZ,GAFC0C,KAAAA,QAAU1C,EAEM,SAAjB,KAAK0C,SAAuC,QAAjB,KAAKA,QAC1B,MAAA,IAAIC,MAAM,sDAQpB3C,aACO,OAAA,KAAK0C,QAQZxC,WAAOA,GACHA,QAAWnH,IAAXmH,EAAsB,CAClBA,IAAAA,GAA4B,iBAAXA,GAA2C,IAApBA,EAAO0C,SAYzC,MAAA,IAAID,MAAM,+CAXZ,GAAgB,SAAhB,KAAK3C,QAAqBE,EAAOpF,aAAa,YACxC,MAAA,IAAI6H,MAAM,qFAGhB,GAAgB,QAAhB,KAAK3C,SAAqBE,EAAOpF,aAAa,aAAeoF,EAAOpF,aAAa,aAC3E,MAAA,IAAI6H,MAAM,0GAGfE,KAAAA,QAAU3C,GAYvBA,aACO,OAAA,KAAK2C,QAMhBC,UACSpC,KAAAA,cAIEb,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC3Mf,SAAA,KAKA,EAAA,UAAA,CACA,GAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,KAAA,EAAA,IAOA,OALA,EAAA,KAAA,EAAA,GAAA,KAAA,KAAA,CACA,GAAA,EACA,IAAA,IAGA,MAGA,KAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KACA,SAAA,IACA,EAAA,IAAA,EAAA,GACA,EAAA,MAAA,EAAA,WAIA,OADA,EAAA,EAAA,EACA,KAAA,GAAA,EAAA,EAAA,IAGA,KAAA,SAAA,GAMA,IALA,IAAA,EAAA,GAAA,MAAA,KAAA,UAAA,GACA,IAAA,KAAA,IAAA,KAAA,EAAA,KAAA,IAAA,IAAA,QACA,EAAA,EACA,EAAA,EAAA,OAEA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAGA,OAAA,MAGA,IAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,KAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,GAEA,GAAA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,GAAA,KAAA,GAAA,EAAA,GAAA,GAAA,IAAA,GACA,EAAA,KAAA,EAAA,IAYA,OAJA,EAAA,OACA,EAAA,GAAA,SACA,EAAA,GAEA,OAIA,OAAA,QAAA,EACA,OAAA,QAAA,YAAA;;AC5DA,QAAA,KAAA,SAAA,GACA,YAAA,IAAA,GACA,aAAA,aACA,IAAA,EAAA,UASA,QAAA,SAAA,SAAA,GACA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAEA,YAAA,IAAA,IACA,sBAAA,GAAA,4BAAA,IACA,WAAA,IACA,IAAA,EAAA,QAAA,QAAA,KAAA,EAAA,MASA,QAAA,OAAA,SAAA,GACA,MAAA,iBAAA,GACA,aAAA,QASA,QAAA,GAAA,SAAA,GAGA,MAAA,sBAFA,OAAA,UAAA,SAAA,KAAA;;AC7CA,IAAA,EAAA,EAKA,GAAA,oBAAA,UAAA,QAAA,UAAA,QAAA,CACA,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,EAAA,iBACA,EAAA,oBACA,EAAA,mBACA,EAAA,kBACA,EAAA,sBAUA,SAAA,EAAA,EAAA,GACA,KAAA,GAAA,EAAA,WAAA,GAAA,CACA,GAAA,mBAAA,EAAA,SACA,EAAA,QAAA,GACA,OAAA,EAEA,EAAA,EAAA,YAIA,OAAA,QAAA;;AChCA,IAAA,EAAA,QAAA,aAYA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,MAAA,KAAA,WAIA,OAFA,EAAA,iBAAA,EAAA,EAAA,GAEA,CACA,QAAA,WACA,EAAA,oBAAA,EAAA,EAAA,KAeA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,MAAA,mBAAA,EAAA,iBACA,EAAA,MAAA,KAAA,WAIA,mBAAA,EAGA,EAAA,KAAA,KAAA,UAAA,MAAA,KAAA,YAIA,iBAAA,IACA,EAAA,SAAA,iBAAA,IAIA,MAAA,UAAA,IAAA,KAAA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAaA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,SAAA,GACA,EAAA,eAAA,EAAA,EAAA,OAAA,GAEA,EAAA,gBACA,EAAA,KAAA,EAAA,IAKA,OAAA,QAAA;;AC7EA,IAAA,EAAA,QAAA,QACA,EAAA,QAAA,YAWA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,IAAA,EACA,MAAA,IAAA,MAAA,8BAGA,IAAA,EAAA,OAAA,GACA,MAAA,IAAA,UAAA,oCAGA,IAAA,EAAA,GAAA,GACA,MAAA,IAAA,UAAA,qCAGA,GAAA,EAAA,KAAA,GACA,OAAA,EAAA,EAAA,EAAA,GAEA,GAAA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,EAAA,GAEA,GAAA,EAAA,OAAA,GACA,OAAA,EAAA,EAAA,EAAA,GAGA,MAAA,IAAA,UAAA,6EAaA,SAAA,EAAA,EAAA,EAAA,GAGA,OAFA,EAAA,iBAAA,EAAA,GAEA,CACA,QAAA,WACA,EAAA,oBAAA,EAAA,KAcA,SAAA,EAAA,EAAA,EAAA,GAKA,OAJA,MAAA,UAAA,QAAA,KAAA,EAAA,SAAA,GACA,EAAA,iBAAA,EAAA,KAGA,CACA,QAAA,WACA,MAAA,UAAA,QAAA,KAAA,EAAA,SAAA,GACA,EAAA,oBAAA,EAAA,OAeA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,EAAA,SAAA,KAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACwCekD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAtIf,IAAA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,kBAoIeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA9Hf,MAAMA,UAAkBC,EAAxB,QAKIxF,YAAY2C,EAASzH,GACjB,QAEKoH,KAAAA,eAAepH,GACfuK,KAAAA,YAAY9C,GAQrBL,eAAepH,EAAU,IAChBsH,KAAAA,OAA0C,mBAAtBtH,EAAQsH,OAA4BtH,EAAQsH,OAAY,KAAKkD,cACjFhD,KAAAA,OAA0C,mBAAtBxH,EAAQwH,OAA4BxH,EAAQwH,OAAY,KAAKiD,cACjFnI,KAAAA,KAA0C,mBAAtBtC,EAAQsC,KAA4BtC,EAAQsC,KAAY,KAAKoI,YACjFjJ,KAAAA,UAA0C,iBAAtBzB,EAAQyB,UAA4BzB,EAAQyB,UAAYqG,SAAS6C,KAO9FJ,YAAY9C,GACHmD,KAAAA,UAAW,EAAOnD,EAAAA,SAAAA,EAAS,QAAUnH,GAAM,KAAKuK,QAAQvK,IAOjEuK,QAAQvK,GACEmH,MAAAA,EAAUnH,EAAEwK,gBAAkBxK,EAAEyK,cAElC,KAAKC,kBACAA,KAAAA,gBAAkB,MAGtBA,KAAAA,gBAAkB,IAAI7D,EAAJ,QAAoB,CACvCG,OAAY,KAAKA,OAAOG,GACxBD,OAAY,KAAKA,OAAOC,GACxBnF,KAAY,KAAKA,KAAKmF,GACtBhG,UAAY,KAAKA,UACjBgG,QAAYA,EACZF,QAAY,OAQpBiD,cAAc/C,GACHwD,OAAAA,EAAkB,SAAUxD,GAOvCgD,cAAchD,GACJyD,MAAAA,EAAWD,EAAkB,SAAUxD,GAEzCyD,GAAAA,EACOpD,OAAAA,SAASqD,cAAcD,GAS/BE,mBAAY9D,EAAS,CAAC,OAAQ,QAC3B+D,MAAAA,EAA6B,iBAAX/D,EAAuB,CAACA,GAAUA,EACtDgE,IAAAA,IAAYxD,SAASyD,sBAMlBD,OAJPD,EAAQG,QAASlE,IACbgE,EAAUA,KAAaxD,SAASyD,sBAAsBjE,KAGnDgE,EAOXZ,YAAYjD,GACDwD,OAAAA,EAAkB,OAAQxD,GAMrC2C,UACSQ,KAAAA,SAASR,UAEV,KAAKY,kBACAA,KAAAA,gBAAgBZ,UAChBY,KAAAA,gBAAkB,OAWnC,SAASC,EAAkBQ,EAAQC,GACzBC,MAAAA,oBAA8BF,IAEhC,GAACC,EAAQtJ,aAAauJ,GAInBD,OAAAA,EAAQtI,aAAauI,GAGjBtB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC/Hf,aAPA,QAAA,0CACA,QAAA,iDACA,QAAA,yCACA,QAAA,qCACA,QAAA,mEACA,QAAA,4CACA,QAAA,2BACA,QAAA","file":"web.f753f8f0.js","sourceRoot":"../../../src/main/web","sourcesContent":["// Copyright (C) 2006 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" + \n      \"double,enum,extern,float,goto,inline,int,long,register,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,final,finally,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [JAVA_KEYWORDS,\n      \"as,base,by,checked,decimal,delegate,descending,dynamic,event,\" +\n      \"fixed,foreach,from,group,implicit,in,internal,into,is,let,\" +\n      \"lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,\" +\n      \"sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,\" +\n      \"var,virtual,where\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"debugger,eval,export,function,get,null,set,undefined,var,with,\" +\n      \"Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n   var RUST_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"as,assert,const,copy,drop,\" +\n      \"enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,\" +\n      \"pub,pure,ref,self,static,struct,true,trait,type,unsafe,use\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS,\n      PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean} isPreformatted true if white-space in text nodes should\n   *    be considered significant.\n   * @return {Object} source code and the text nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   */\n  function appendDecorations(basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    var job = {\n      sourceCode: sourceCode,\n      basePos: basePos\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (Object)} a\n    *   function that takes source code and returns a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and produces an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @param {Object} job an object like <pre>{\n     *    sourceCode: {string} sourceText plain text,\n     *    basePos: {int} position of job.sourceCode in the larger chunk of\n     *        sourceCode.\n     * }</pre>\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {Array.<number|string>}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (Object)} a function that examines the source code\n    *     in the input job and builds the decoration list.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n      \n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, opt_startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (opt_startLineNum === (opt_startLineNum|0)) {\n      listItems[0].setAttribute('value', opt_startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((opt_startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {Object} job like <pre>{\n   *    sourceCode: {string} source as plain text,\n   *    sourceNode: {HTMLElement} the element containing the source,\n   *    spans: {Array.<number|Node>} alternating span start indices into source\n   *       and the text node or element (e.g. {@code <BR>}) corresponding to that\n   *       span.\n   *    decorations: {Array.<number|string} an array of style classes preceded\n   *       by the position at which they start in job.sourceCode in order\n   * }</pre>\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay;\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = spans[spanIndex + 2] || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = spans[spanIndex + 1];\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (Object)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation.   The single parameter has the form\n    *      {@code {\n    *        sourceCode: {string} as plain text.\n    *        decorations: {Array.<number|string>} an array of style classes\n    *                     preceded by the position at which they start in\n    *                     job.sourceCode in order.\n    *                     The language handler should assigned this field.\n    *        basePos: {int} the position of source in the larger source chunk.\n    *                 All positions in the output decorations array are relative\n    *                 to the larger source chunk.\n    *      } }\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUST_KEYWORDS,\n          'cStyleComments': true,\n          'multilineStrings': true\n        }), ['rc', 'rs', 'rust']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = container.firstChild;\n    if (opt_numberLines) {\n      numberLines(container, opt_numberLines, true);\n    }\n\n    var job = {\n      langExtension: opt_langExtension,\n      numberLines: opt_numberLines,\n      sourceNode: container,\n      pre: 1\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n    var prettyPrintingJob;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR; \n    });\n  }\n})();\n","const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nfunction pad(num) {\n  return \"0\".concat(num).slice(-2);\n}\n\nfunction strftime(time, formatString) {\n  const day = time.getDay();\n  const date = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours();\n  const minute = time.getMinutes();\n  const second = time.getSeconds();\n  return formatString.replace(/%([%aAbBcdeHIlmMpPSwyYZz])/g, function (_arg) {\n    let match;\n    const modifier = _arg[1];\n\n    switch (modifier) {\n      case '%':\n        return '%';\n\n      case 'a':\n        return weekdays[day].slice(0, 3);\n\n      case 'A':\n        return weekdays[day];\n\n      case 'b':\n        return months[month].slice(0, 3);\n\n      case 'B':\n        return months[month];\n\n      case 'c':\n        return time.toString();\n\n      case 'd':\n        return pad(date);\n\n      case 'e':\n        return String(date);\n\n      case 'H':\n        return pad(hour);\n\n      case 'I':\n        return pad(strftime(time, '%l'));\n\n      case 'l':\n        if (hour === 0 || hour === 12) {\n          return String(12);\n        } else {\n          return String((hour + 12) % 12);\n        }\n\n      case 'm':\n        return pad(month + 1);\n\n      case 'M':\n        return pad(minute);\n\n      case 'p':\n        if (hour > 11) {\n          return 'PM';\n        } else {\n          return 'AM';\n        }\n\n      case 'P':\n        if (hour > 11) {\n          return 'pm';\n        } else {\n          return 'am';\n        }\n\n      case 'S':\n        return pad(second);\n\n      case 'w':\n        return String(day);\n\n      case 'y':\n        return pad(year % 100);\n\n      case 'Y':\n        return String(year);\n\n      case 'Z':\n        match = time.toString().match(/\\((\\w+)\\)$/);\n        return match ? match[1] : '';\n\n      case 'z':\n        match = time.toString().match(/\\w([+-]\\d\\d\\d\\d) /);\n        return match ? match[1] : '';\n    }\n\n    return '';\n  });\n}\nfunction makeFormatter(options) {\n  let format;\n  return function () {\n    if (format) return format;\n\n    if ('Intl' in window) {\n      try {\n        format = new Intl.DateTimeFormat(undefined, options);\n        return format;\n      } catch (e) {\n        if (!(e instanceof RangeError)) {\n          throw e;\n        }\n      }\n    }\n  };\n}\nlet dayFirst = null;\nconst dayFirstFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short'\n}); // Private: Determine if the day should be formatted before the month name in\n// the user's current locale. For example, `9 Jun` for en-GB and `Jun 9`\n// for en-US.\n//\n// Returns true if the day appears before the month.\n\nfunction isDayFirst() {\n  if (dayFirst !== null) {\n    return dayFirst;\n  }\n\n  const formatter = dayFirstFormatter();\n\n  if (formatter) {\n    const output = formatter.format(new Date(0));\n    dayFirst = !!output.match(/^\\d/);\n    return dayFirst;\n  } else {\n    return false;\n  }\n}\nlet yearSeparator = null;\nconst yearFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric'\n}); // Private: Determine if the year should be separated from the month and day\n// with a comma. For example, `9 Jun 2014` in en-GB and `Jun 9, 2014` in en-US.\n//\n// Returns true if the date needs a separator.\n\nfunction isYearSeparator() {\n  if (yearSeparator !== null) {\n    return yearSeparator;\n  }\n\n  const formatter = yearFormatter();\n\n  if (formatter) {\n    const output = formatter.format(new Date(0));\n    yearSeparator = !!output.match(/\\d,/);\n    return yearSeparator;\n  } else {\n    return true;\n  }\n} // Private: Determine if the date occurs in the same year as today's date.\n//\n// date - The Date to test.\n//\n// Returns true if it's this year.\n\nfunction isThisYear(date) {\n  const now = new Date();\n  return now.getUTCFullYear() === date.getUTCFullYear();\n}\nfunction makeRelativeFormat(locale, options) {\n  if ('Intl' in window && 'RelativeTimeFormat' in window.Intl) {\n    try {\n      // eslint-disable-next-line flowtype/no-flow-fix-me-comments\n      // $FlowFixMe: missing RelativeTimeFormat type\n      return new Intl.RelativeTimeFormat(locale, options);\n    } catch (e) {\n      if (!(e instanceof RangeError)) {\n        throw e;\n      }\n    }\n  }\n} // Private: Get preferred Intl locale for a target element.\n//\n// Traverses parents until it finds an explicit `lang` other returns \"default\".\n\nfunction localeFromElement(el) {\n  const container = el.closest('[lang]');\n\n  if (container instanceof HTMLElement && container.lang) {\n    return container.lang;\n  }\n\n  return 'default';\n}\n\nconst datetimes = new WeakMap();\nclass ExtendedTimeElement extends HTMLElement {\n  static get observedAttributes() {\n    return ['datetime', 'day', 'format', 'lang', 'hour', 'minute', 'month', 'second', 'title', 'weekday', 'year'];\n  }\n\n  connectedCallback() {\n    const title = this.getFormattedTitle();\n\n    if (title && !this.hasAttribute('title')) {\n      this.setAttribute('title', title);\n    }\n\n    const text = this.getFormattedDate();\n\n    if (text) {\n      this.textContent = text;\n    }\n  } // Internal: Refresh the time element's formatted date when an attribute changes.\n\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    const oldTitle = this.getFormattedTitle();\n\n    if (attrName === 'datetime') {\n      const millis = Date.parse(newValue);\n\n      if (isNaN(millis)) {\n        datetimes.delete(this);\n      } else {\n        datetimes.set(this, new Date(millis));\n      }\n    }\n\n    const title = this.getFormattedTitle();\n    const currentTitle = this.getAttribute('title');\n\n    if (attrName !== 'title' && title && (!currentTitle || currentTitle === oldTitle)) {\n      this.setAttribute('title', title);\n    }\n\n    const text = this.getFormattedDate();\n\n    if (text) {\n      this.textContent = text;\n    }\n  }\n\n  get date() {\n    return datetimes.get(this);\n  } // Internal: Format the ISO 8601 timestamp according to the user agent's\n  // locale-aware formatting rules. The element's existing `title` attribute\n  // value takes precedence over this custom format.\n  //\n  // Returns a formatted time String.\n\n\n  getFormattedTitle() {\n    const date = this.date;\n    if (!date) return;\n    const formatter = titleFormatter();\n\n    if (formatter) {\n      return formatter.format(date);\n    } else {\n      try {\n        return date.toLocaleString();\n      } catch (e) {\n        if (e instanceof RangeError) {\n          return date.toString();\n        } else {\n          throw e;\n        }\n      }\n    }\n  }\n\n  getFormattedDate() {}\n\n}\nconst titleFormatter = makeFormatter({\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'short'\n});\n\nconst formatters = new WeakMap();\nclass LocalTimeElement extends ExtendedTimeElement {\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === 'hour' || attrName === 'minute' || attrName === 'second' || attrName === 'time-zone-name') {\n      formatters.delete(this);\n    }\n\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  } // Formats the element's date, in the user's current locale, according to\n  // the formatting attribute values. Values are not passed straight through to\n  // an Intl.DateTimeFormat instance so that weekday and month names are always\n  // displayed in English, for now.\n  //\n  // Supported attributes are:\n  //\n  //   weekday - \"short\", \"long\"\n  //   year    - \"numeric\", \"2-digit\"\n  //   month   - \"short\", \"long\"\n  //   day     - \"numeric\", \"2-digit\"\n  //   hour    - \"numeric\", \"2-digit\"\n  //   minute  - \"numeric\", \"2-digit\"\n  //   second  - \"numeric\", \"2-digit\"\n  //\n  // Returns a formatted time String.\n\n\n  getFormattedDate() {\n    const d = this.date;\n    if (!d) return;\n    const date = formatDate(this, d) || '';\n    const time = formatTime(this, d) || '';\n    return \"\".concat(date, \" \").concat(time).trim();\n  }\n\n} // Private: Format a date according to the `weekday`, `day`, `month`,\n// and `year` attribute values.\n//\n// This doesn't use Intl.DateTimeFormat to avoid creating text in the user's\n// language when the majority of the surrounding text is in English. There's\n// currently no way to separate the language from the format in Intl.\n//\n// el - The local-time element to format.\n//\n// Returns a date String or null if no date formats are provided.\n\nfunction formatDate(el, date) {\n  // map attribute values to strftime\n  const props = {\n    weekday: {\n      short: '%a',\n      long: '%A'\n    },\n    day: {\n      numeric: '%e',\n      '2-digit': '%d'\n    },\n    month: {\n      short: '%b',\n      long: '%B'\n    },\n    year: {\n      numeric: '%Y',\n      '2-digit': '%y'\n    } // build a strftime format string\n\n  };\n  let format = isDayFirst() ? 'weekday day month year' : 'weekday month day, year';\n\n  for (const prop in props) {\n    const value = props[prop][el.getAttribute(prop)];\n    format = format.replace(prop, value || '');\n  } // clean up year separator comma\n\n\n  format = format.replace(/(\\s,)|(,\\s$)/, ''); // squeeze spaces from final string\n\n  return strftime(date, format).replace(/\\s+/, ' ').trim();\n} // Private: Format a time according to the `hour`, `minute`, and `second`\n// attribute values.\n//\n// el - The local-time element to format.\n//\n// Returns a time String or null if no time formats are provided.\n\n\nfunction formatTime(el, date) {\n  const options = {}; // retrieve format settings from attributes\n\n  const hour = el.getAttribute('hour');\n  if (hour === 'numeric' || hour === '2-digit') options.hour = hour;\n  const minute = el.getAttribute('minute');\n  if (minute === 'numeric' || minute === '2-digit') options.minute = minute;\n  const second = el.getAttribute('second');\n  if (second === 'numeric' || second === '2-digit') options.second = second;\n  const tz = el.getAttribute('time-zone-name');\n  if (tz === 'short' || tz === 'long') options.timeZoneName = tz; // No time format attributes provided.\n\n  if (Object.keys(options).length === 0) {\n    return;\n  }\n\n  let factory = formatters.get(el);\n\n  if (!factory) {\n    factory = makeFormatter(options);\n    formatters.set(el, factory);\n  }\n\n  const formatter = factory();\n\n  if (formatter) {\n    // locale-aware formatting of 24 or 12 hour times\n    return formatter.format(date);\n  } else {\n    // fall back to strftime for non-Intl browsers\n    const timef = options.second ? '%H:%M:%S' : '%H:%M';\n    return strftime(date, timef);\n  }\n} // Public: LocalTimeElement constructor.\n//\n//   var time = new LocalTimeElement()\n//   # => <local-time></local-time>\n//\n\n\nif (!window.customElements.get('local-time')) {\n  window.LocalTimeElement = LocalTimeElement;\n  window.customElements.define('local-time', LocalTimeElement);\n}\n\nclass RelativeTime {\n  constructor(date, locale) {\n    this.date = date;\n    this.locale = locale;\n  }\n\n  toString() {\n    const ago = this.timeElapsed();\n\n    if (ago) {\n      return ago;\n    } else {\n      const ahead = this.timeAhead();\n\n      if (ahead) {\n        return ahead;\n      } else {\n        return \"on \".concat(this.formatDate());\n      }\n    }\n  }\n\n  timeElapsed() {\n    const ms = new Date().getTime() - this.date.getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n\n    if (ms >= 0 && day < 30) {\n      return this.timeAgoFromMs(ms);\n    } else {\n      return null;\n    }\n  }\n\n  timeAhead() {\n    const ms = this.date.getTime() - new Date().getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n\n    if (ms >= 0 && day < 30) {\n      return this.timeUntil();\n    } else {\n      return null;\n    }\n  }\n\n  timeAgo() {\n    const ms = new Date().getTime() - this.date.getTime();\n    return this.timeAgoFromMs(ms);\n  }\n\n  timeAgoFromMs(ms) {\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (ms < 0) {\n      return formatRelativeTime(this.locale, 0, 'second');\n    } else if (sec < 10) {\n      return formatRelativeTime(this.locale, 0, 'second');\n    } else if (sec < 45) {\n      return formatRelativeTime(this.locale, -sec, 'second');\n    } else if (sec < 90) {\n      return formatRelativeTime(this.locale, -min, 'minute');\n    } else if (min < 45) {\n      return formatRelativeTime(this.locale, -min, 'minute');\n    } else if (min < 90) {\n      return formatRelativeTime(this.locale, -hr, 'hour');\n    } else if (hr < 24) {\n      return formatRelativeTime(this.locale, -hr, 'hour');\n    } else if (hr < 36) {\n      return formatRelativeTime(this.locale, -day, 'day');\n    } else if (day < 30) {\n      return formatRelativeTime(this.locale, -day, 'day');\n    } else if (month < 12) {\n      return formatRelativeTime(this.locale, -month, 'month');\n    } else if (month < 18) {\n      return formatRelativeTime(this.locale, -year, 'year');\n    } else {\n      return formatRelativeTime(this.locale, -year, 'year');\n    }\n  }\n\n  microTimeAgo() {\n    const ms = new Date().getTime() - this.date.getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (min < 1) {\n      return '1m';\n    } else if (min < 60) {\n      return \"\".concat(min, \"m\");\n    } else if (hr < 24) {\n      return \"\".concat(hr, \"h\");\n    } else if (day < 365) {\n      return \"\".concat(day, \"d\");\n    } else {\n      return \"\".concat(year, \"y\");\n    }\n  }\n\n  timeUntil() {\n    const ms = this.date.getTime() - new Date().getTime();\n    return this.timeUntilFromMs(ms);\n  }\n\n  timeUntilFromMs(ms) {\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (month >= 18) {\n      return formatRelativeTime(this.locale, year, 'year');\n    } else if (month >= 12) {\n      return formatRelativeTime(this.locale, year, 'year');\n    } else if (day >= 45) {\n      return formatRelativeTime(this.locale, month, 'month');\n    } else if (day >= 30) {\n      return formatRelativeTime(this.locale, month, 'month');\n    } else if (hr >= 36) {\n      return formatRelativeTime(this.locale, day, 'day');\n    } else if (hr >= 24) {\n      return formatRelativeTime(this.locale, day, 'day');\n    } else if (min >= 90) {\n      return formatRelativeTime(this.locale, hr, 'hour');\n    } else if (min >= 45) {\n      return formatRelativeTime(this.locale, hr, 'hour');\n    } else if (sec >= 90) {\n      return formatRelativeTime(this.locale, min, 'minute');\n    } else if (sec >= 45) {\n      return formatRelativeTime(this.locale, min, 'minute');\n    } else if (sec >= 10) {\n      return formatRelativeTime(this.locale, sec, 'second');\n    } else {\n      return formatRelativeTime(this.locale, 0, 'second');\n    }\n  }\n\n  microTimeUntil() {\n    const ms = this.date.getTime() - new Date().getTime();\n    const sec = Math.round(ms / 1000);\n    const min = Math.round(sec / 60);\n    const hr = Math.round(min / 60);\n    const day = Math.round(hr / 24);\n    const month = Math.round(day / 30);\n    const year = Math.round(month / 12);\n\n    if (day >= 365) {\n      return \"\".concat(year, \"y\");\n    } else if (hr >= 24) {\n      return \"\".concat(day, \"d\");\n    } else if (min >= 60) {\n      return \"\".concat(hr, \"h\");\n    } else if (min > 1) {\n      return \"\".concat(min, \"m\");\n    } else {\n      return '1m';\n    }\n  }\n\n  formatDate() {\n    let format = isDayFirst() ? '%e %b' : '%b %e';\n\n    if (!isThisYear(this.date)) {\n      format += isYearSeparator() ? ', %Y' : ' %Y';\n    }\n\n    return strftime(this.date, format);\n  }\n\n  formatTime() {\n    const formatter = timeFormatter();\n\n    if (formatter) {\n      return formatter.format(this.date);\n    } else {\n      return strftime(this.date, '%l:%M%P');\n    }\n  }\n\n}\n\nfunction formatRelativeTime(locale, value, unit) {\n  const formatter = makeRelativeFormat(locale, {\n    numeric: 'auto'\n  });\n\n  if (formatter) {\n    return formatter.format(value, unit);\n  } else {\n    return formatEnRelativeTime(value, unit);\n  }\n} // Simplified \"en\" RelativeTimeFormat.format function\n//\n// Values should roughly match\n//   new Intl.RelativeTimeFormat('en', {numeric: 'auto'}).format(value, unit)\n//\n\n\nfunction formatEnRelativeTime(value, unit) {\n  if (value === 0) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"this \".concat(unit);\n\n      case 'day':\n        return 'today';\n\n      case 'hour':\n      case 'minute':\n        return \"in 0 \".concat(unit, \"s\");\n\n      case 'second':\n        return 'now';\n    }\n  } else if (value === 1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"next \".concat(unit);\n\n      case 'day':\n        return 'tomorrow';\n\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"in 1 \".concat(unit);\n    }\n  } else if (value === -1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n        return \"last \".concat(unit);\n\n      case 'day':\n        return 'yesterday';\n\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"1 \".concat(unit, \" ago\");\n    }\n  } else if (value > 1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n      case 'day':\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"in \".concat(value, \" \").concat(unit, \"s\");\n    }\n  } else if (value < -1) {\n    switch (unit) {\n      case 'year':\n      case 'quarter':\n      case 'month':\n      case 'week':\n      case 'day':\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return \"\".concat(-value, \" \").concat(unit, \"s ago\");\n    }\n  }\n\n  throw new RangeError(\"Invalid unit argument for format() '\".concat(unit, \"'\"));\n}\n\nconst timeFormatter = makeFormatter({\n  hour: 'numeric',\n  minute: '2-digit'\n});\n\nclass RelativeTimeElement extends ExtendedTimeElement {\n  getFormattedDate() {\n    const date = this.date;\n\n    if (date) {\n      return new RelativeTime(date, localeFromElement(this)).toString();\n    }\n  }\n\n  connectedCallback() {\n    nowElements.push(this);\n\n    if (!updateNowElementsId) {\n      updateNowElements();\n      updateNowElementsId = setInterval(updateNowElements, 60 * 1000);\n    }\n\n    super.connectedCallback();\n  }\n\n  disconnectedCallback() {\n    const ix = nowElements.indexOf(this);\n\n    if (ix !== -1) {\n      nowElements.splice(ix, 1);\n    }\n\n    if (!nowElements.length) {\n      if (updateNowElementsId) {\n        clearInterval(updateNowElementsId);\n        updateNowElementsId = null;\n      }\n    }\n  }\n\n} // Internal: Array tracking all elements attached to the document that need\n// to be updated every minute.\n\nconst nowElements = []; // Internal: Timer ID for `updateNowElements` interval.\n\nlet updateNowElementsId; // Internal: Install a timer to refresh all attached relative-time elements every\n// minute.\n\nfunction updateNowElements() {\n  let time, i, len;\n\n  for (i = 0, len = nowElements.length; i < len; i++) {\n    time = nowElements[i];\n    time.textContent = time.getFormattedDate() || '';\n  }\n} // Public: RelativeTimeElement constructor.\n//\n//   var time = new RelativeTimeElement()\n//   # => <relative-time></relative-time>\n//\n\n\nif (!window.customElements.get('relative-time')) {\n  window.RelativeTimeElement = RelativeTimeElement;\n  window.customElements.define('relative-time', RelativeTimeElement);\n}\n\nclass TimeAgoElement extends RelativeTimeElement {\n  getFormattedDate() {\n    const format = this.getAttribute('format');\n    const date = this.date;\n    if (!date) return;\n\n    if (format === 'micro') {\n      return new RelativeTime(date, localeFromElement(this)).microTimeAgo();\n    } else {\n      return new RelativeTime(date, localeFromElement(this)).timeAgo();\n    }\n  }\n\n}\n\nif (!window.customElements.get('time-ago')) {\n  window.TimeAgoElement = TimeAgoElement;\n  window.customElements.define('time-ago', TimeAgoElement);\n}\n\nclass TimeUntilElement extends RelativeTimeElement {\n  getFormattedDate() {\n    const format = this.getAttribute('format');\n    const date = this.date;\n    if (!date) return;\n\n    if (format === 'micro') {\n      return new RelativeTime(date, localeFromElement(this)).microTimeUntil();\n    } else {\n      return new RelativeTime(date, localeFromElement(this)).timeUntil();\n    }\n  }\n\n}\n\nif (!window.customElements.get('time-until')) {\n  window.TimeUntilElement = TimeUntilElement;\n  window.customElements.define('time-until', TimeUntilElement);\n}\n\nexport { LocalTimeElement, RelativeTimeElement, TimeAgoElement, TimeUntilElement };\n","function select(element) {\n    var selectedText;\n\n    if (element.nodeName === 'SELECT') {\n        element.focus();\n\n        selectedText = element.value;\n    }\n    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        var isReadOnly = element.hasAttribute('readonly');\n\n        if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n        }\n\n        element.select();\n        element.setSelectionRange(0, element.value.length);\n\n        if (!isReadOnly) {\n            element.removeAttribute('readonly');\n        }\n\n        selectedText = element.value;\n    }\n    else {\n        if (element.hasAttribute('contenteditable')) {\n            element.focus();\n        }\n\n        var selection = window.getSelection();\n        var range = document.createRange();\n\n        range.selectNodeContents(element);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        selectedText = selection.toString();\n    }\n\n    return selectedText;\n}\n\nmodule.exports = select;\n","import select from 'select';\n\n/**\n * Inner class which performs selection from either `text` or `target`\n * properties and then executes copy or cut operations.\n */\nclass ClipboardAction {\n    /**\n     * @param {Object} options\n     */\n    constructor(options) {\n        this.resolveOptions(options);\n        this.initSelection();\n    }\n\n    /**\n     * Defines base properties passed from constructor.\n     * @param {Object} options\n     */\n    resolveOptions(options = {}) {\n        this.action    = options.action;\n        this.container = options.container;\n        this.emitter   = options.emitter;\n        this.target    = options.target;\n        this.text      = options.text;\n        this.trigger   = options.trigger;\n\n        this.selectedText = '';\n    }\n\n    /**\n     * Decides which selection strategy is going to be applied based\n     * on the existence of `text` and `target` properties.\n     */\n    initSelection() {\n        if (this.text) {\n            this.selectFake();\n        }\n        else if (this.target) {\n            this.selectTarget();\n        }\n    }\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    selectFake() {\n        const isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n        this.removeFake();\n\n        this.fakeHandlerCallback = () => this.removeFake();\n        this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n        this.fakeElem = document.createElement('textarea');\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n        // Move element to the same position vertically\n        let yPosition = window.pageYOffset || document.documentElement.scrollTop;\n        this.fakeElem.style.top = `${yPosition}px`;\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = this.text;\n\n        this.container.appendChild(this.fakeElem);\n\n        this.selectedText = select(this.fakeElem);\n        this.copyText();\n    }\n\n    /**\n     * Only removes the fake element after another click event, that way\n     * a user can hit `Ctrl+C` to copy because selection still exists.\n     */\n    removeFake() {\n        if (this.fakeHandler) {\n            this.container.removeEventListener('click', this.fakeHandlerCallback);\n            this.fakeHandler = null;\n            this.fakeHandlerCallback = null;\n        }\n\n        if (this.fakeElem) {\n            this.container.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    /**\n     * Selects the content from element passed on `target` property.\n     */\n    selectTarget() {\n        this.selectedText = select(this.target);\n        this.copyText();\n    }\n\n    /**\n     * Executes the copy operation based on the current selection.\n     */\n    copyText() {\n        let succeeded;\n\n        try {\n            succeeded = document.execCommand(this.action);\n        }\n        catch (err) {\n            succeeded = false;\n        }\n\n        this.handleResult(succeeded);\n    }\n\n    /**\n     * Fires an event based on the copy operation result.\n     * @param {Boolean} succeeded\n     */\n    handleResult(succeeded) {\n        this.emitter.emit(succeeded ? 'success' : 'error', {\n            action: this.action,\n            text: this.selectedText,\n            trigger: this.trigger,\n            clearSelection: this.clearSelection.bind(this)\n        });\n    }\n\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    clearSelection() {\n        if (this.trigger) {\n            this.trigger.focus();\n        }\n        document.activeElement.blur();\n        window.getSelection().removeAllRanges();\n    }\n\n    /**\n     * Sets the `action` to be performed which can be either 'copy' or 'cut'.\n     * @param {String} action\n     */\n    set action(action = 'copy') {\n        this._action = action;\n\n        if (this._action !== 'copy' && this._action !== 'cut') {\n            throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n        }\n    }\n\n    /**\n     * Gets the `action` property.\n     * @return {String}\n     */\n    get action() {\n        return this._action;\n    }\n\n    /**\n     * Sets the `target` property using an element\n     * that will be have its content copied.\n     * @param {Element} target\n     */\n    set target(target) {\n        if (target !== undefined) {\n            if (target && typeof target === 'object' && target.nodeType === 1) {\n                if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                    throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n\n                if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                    throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                }\n\n                this._target = target;\n            }\n            else {\n                throw new Error('Invalid \"target\" value, use a valid Element');\n            }\n        }\n    }\n\n    /**\n     * Gets the `target` property.\n     * @return {String|HTMLElement}\n     */\n    get target() {\n        return this._target;\n    }\n\n    /**\n     * Destroy lifecycle.\n     */\n    destroy() {\n        this.removeFake();\n    }\n}\n\nexport default ClipboardAction;\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n    return value !== undefined\n        && value instanceof HTMLElement\n        && value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return value !== undefined\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\n        && ('length' in value)\n        && (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n    return typeof value === 'string'\n        || value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return type === '[object Function]';\n};\n","var DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n    var proto = Element.prototype;\n\n    proto.matches = proto.matchesSelector ||\n                    proto.mozMatchesSelector ||\n                    proto.msMatchesSelector ||\n                    proto.oMatchesSelector ||\n                    proto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest (element, selector) {\n    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n        if (typeof element.matches === 'function' &&\n            element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n    }\n}\n\nmodule.exports = closest;\n","var closest = require('./closest');\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction _delegate(element, selector, type, callback, useCapture) {\n    var listenerFn = listener.apply(this, arguments);\n\n    element.addEventListener(type, listenerFn, useCapture);\n\n    return {\n        destroy: function() {\n            element.removeEventListener(type, listenerFn, useCapture);\n        }\n    }\n}\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element|String|Array} [elements]\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(elements, selector, type, callback, useCapture) {\n    // Handle the regular Element usage\n    if (typeof elements.addEventListener === 'function') {\n        return _delegate.apply(null, arguments);\n    }\n\n    // Handle Element-less usage, it defaults to global delegation\n    if (typeof type === 'function') {\n        // Use `document` as the first parameter, then apply arguments\n        // This is a short way to .unshift `arguments` without running into deoptimizations\n        return _delegate.bind(null, document).apply(null, arguments);\n    }\n\n    // Handle Selector-based usage\n    if (typeof elements === 'string') {\n        elements = document.querySelectorAll(elements);\n    }\n\n    // Handle Array-like based usage\n    return Array.prototype.map.call(elements, function (element) {\n        return _delegate(element, selector, type, callback, useCapture);\n    });\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n    return function(e) {\n        e.delegateTarget = closest(e.target, selector);\n\n        if (e.delegateTarget) {\n            callback.call(element, e);\n        }\n    }\n}\n\nmodule.exports = delegate;\n","var is = require('./is');\nvar delegate = require('delegate');\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n","import ClipboardAction from './clipboard-action';\nimport Emitter from 'tiny-emitter';\nimport listen from 'good-listener';\n\n/**\n * Base class which takes one or more elements, adds event listeners to them,\n * and instantiates a new `ClipboardAction` on each click.\n */\nclass Clipboard extends Emitter {\n    /**\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     * @param {Object} options\n     */\n    constructor(trigger, options) {\n        super();\n\n        this.resolveOptions(options);\n        this.listenClick(trigger);\n    }\n\n    /**\n     * Defines if attributes would be resolved using internal setter functions\n     * or custom functions that were passed in the constructor.\n     * @param {Object} options\n     */\n    resolveOptions(options = {}) {\n        this.action    = (typeof options.action    === 'function') ? options.action    : this.defaultAction;\n        this.target    = (typeof options.target    === 'function') ? options.target    : this.defaultTarget;\n        this.text      = (typeof options.text      === 'function') ? options.text      : this.defaultText;\n        this.container = (typeof options.container === 'object')   ? options.container : document.body;\n    }\n\n    /**\n     * Adds a click event listener to the passed trigger.\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     */\n    listenClick(trigger) {\n        this.listener = listen(trigger, 'click', (e) => this.onClick(e));\n    }\n\n    /**\n     * Defines a new `ClipboardAction` on each click event.\n     * @param {Event} e\n     */\n    onClick(e) {\n        const trigger = e.delegateTarget || e.currentTarget;\n\n        if (this.clipboardAction) {\n            this.clipboardAction = null;\n        }\n\n        this.clipboardAction = new ClipboardAction({\n            action    : this.action(trigger),\n            target    : this.target(trigger),\n            text      : this.text(trigger),\n            container : this.container,\n            trigger   : trigger,\n            emitter   : this\n        });\n    }\n\n    /**\n     * Default `action` lookup function.\n     * @param {Element} trigger\n     */\n    defaultAction(trigger) {\n        return getAttributeValue('action', trigger);\n    }\n\n    /**\n     * Default `target` lookup function.\n     * @param {Element} trigger\n     */\n    defaultTarget(trigger) {\n        const selector = getAttributeValue('target', trigger);\n\n        if (selector) {\n            return document.querySelector(selector);\n        }\n    }\n\n    /**\n     * Returns the support of the given action, or all actions if no action is\n     * given.\n     * @param {String} [action]\n     */\n    static isSupported(action = ['copy', 'cut']) {\n        const actions = (typeof action === 'string') ? [action] : action;\n        let support = !!document.queryCommandSupported;\n\n        actions.forEach((action) => {\n            support = support && !!document.queryCommandSupported(action);\n        });\n\n        return support;\n    }\n\n    /**\n     * Default `text` lookup function.\n     * @param {Element} trigger\n     */\n    defaultText(trigger) {\n        return getAttributeValue('text', trigger);\n    }\n\n    /**\n     * Destroy lifecycle.\n     */\n    destroy() {\n        this.listener.destroy();\n\n        if (this.clipboardAction) {\n            this.clipboardAction.destroy();\n            this.clipboardAction = null;\n        }\n    }\n}\n\n\n/**\n * Helper function to retrieve attribute value.\n * @param {String} suffix\n * @param {Element} element\n */\nfunction getAttributeValue(suffix, element) {\n    const attribute = `data-clipboard-${suffix}`;\n\n    if (!element.hasAttribute(attribute)) {\n        return;\n    }\n\n    return element.getAttribute(attribute);\n}\n\nexport default Clipboard;\n","import \"@patternfly/patternfly/patternfly.scss\";\nimport \"@patternfly/patternfly/patternfly-addons.scss\";\nimport \"google-code-prettify/src/prettify.css\";\nimport \"google-code-prettify/src/prettify\";\nimport \"color-themes-for-google-code-prettify/src/themes/github-v2.scss\";\nimport \"@github/time-elements/dist/time-elements\";\nimport \"clipboard/src/clipboard\"\nimport \"./styles.scss\";"]}